head[head(===================================================================)filename()]
head[head(--- )filename(/Users/jgoebel/rails/pastie/app/controllers/pastes_controller.rb)plain(  (revision 1431\))]
head[head(+++ )filename(/Users/jgoebel/rails/pastie/app/controllers/pastes_controller.rb)plain(  (revision 1437\))]
change[change(@@)plain( -1,6 +1,10 )change(@@)]
insert[insert(+)ident(require) string<delimiter(')content(login_system)delimiter(')>]
 ident(require) string<delimiter(')content(coderay)delimiter(')>
 
 reserved(class) class(PastesController) operator(<) constant(ApplicationController)
insert[insert(+)  ident(include) constant(LoginSystem)]
insert[insert(+)]
insert[insert(+)  ident(before_filter) symbol(:attempt_cookie_login)]
 
 comment(#  caches_action :recent)
 
change[change(@@)plain( -10,11 +14,7 )change(@@)]
 
   reserved(def) method(show)
     instance_variable(@paste) operator(=) constant(Paste)operator(.)ident(find)operator(()ident(params)operator([)symbol(:id)operator(])operator(\))
delete[delete(-)    reserved(if) ident(params)operator([)symbol(:key)operator(]) reserved(and) ident(params)operator([)symbol(:key)operator(])operator(==)constant(User)operator(.)ident(new)operator(()instance_variable(@paste)operator(.)ident(nick)operator(\))operator(.)ident(magic_mojo)]
delete[delete(-)        ident(session)operator([)symbol(:login)operator(])operator(=)instance_variable(@paste)operator(.)ident(nick)]
delete[delete(-)        reserved(return) ident(redirect_to)operator(()symbol(:action) operator(=)operator(>) string<delimiter(')content(show)delimiter(')>operator(,) symbol(:id) operator(=)operator(>) instance_variable(@paste)operator(.)ident(id)operator(\))]
delete[delete(-)    reserved(end)]
delete[delete(-)    ]
insert[insert(+)    ident(attempt_key_login) reserved(if) reserved(not) ident(logged_in?)]
     reserved(unless) instance_variable(@paste)operator(.)ident(asset) reserved(or) reserved(not) instance_variable(@paste)operator(.)ident(body)operator(.)ident(blank?)
       ident(render) symbol(:action) operator(=)operator(>) string<delimiter(")content(edit)delimiter(")>
     reserved(end)