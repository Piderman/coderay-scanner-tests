operator(()reserved(ns) ident(clj-swing.button)
  operator(()symbol(:use) operator([)ident(clj-swing.core) symbol(:only) operator([)ident(add-action-listener) ident(icon-setters) ident(auto-setters)operator(])operator(])operator(\))
  operator(()symbol(:import) operator(()ident(javax.swing) ident(JButton) ident(JCheckBox) ident(JCheckBoxMenuItem) ident(JRadioButton) ident(JRadioButtonMenuItem) ident(JToggleButton) ident(ButtonGroup)operator(\))operator(\))operator(\))


operator(()reserved(def) ident(*button-icon-keys*) 
     operator([)symbol(:icon) symbol(:disabled-icon) symbol(:selected-icon) symbol(:pressed-icon) symbol(:disabled-selected-icon) symbol(:rollover-icon) symbol(:rollover-selected-icon) operator(])operator(\))
operator(()reserved(def) ident(*button-known-keys*)
     operator(()reserved(concat) operator([)symbol(:action) symbol(:caption) symbol(:name)operator(]) ident(*button-icon-keys*)operator(\))operator(\))


operator(()reserved(defmacro) ident(general-button) operator([)ident(cl) operator({)ident(caption) symbol(:caption) ident(action) symbol(:action) reserved(name) symbol(:name) symbol(:as) ident(opts)operator(})operator(])
  operator(()reserved(let) operator([)ident(b) operator(()reserved(or) reserved(name) operator(()reserved(gensym) string<delimiter(")content(btn)delimiter(")>operator(\))operator(\))operator(])
    error(`)operator(()reserved(let) operator([)error(~)ident(b)  operator(()reserved(new) error(~)ident(cl)operator(\))operator(])
       operator(()reserved(doto) error(~)ident(b)
	 error(~)error(@)operator(()reserved(if) ident(caption)  
	     operator([)error(`)operator(()reserved(.)ident(setText) error(~)ident(caption)operator(\))operator(])operator(\))
	 error(~)error(@)operator(()reserved(if) ident(action)  
	     operator([)error(`)operator(()ident(add-action-listener) error(~)ident(action)operator(\))operator(])operator(\))
	 error(~)error(@)operator(()ident(icon-setters) ident(*button-icon-keys*)  ident(opts)operator(\))
	 error(~)error(@)operator(()ident(auto-setters) ident(JButton) ident(*button-known-keys*) ident(opts)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defmacro) ident(button) operator([)ident(caption) ident(&) operator({)symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()ident(general-button) ident(JButton) error(~)operator(()reserved(assoc) ident(opts) symbol(:caption) ident(caption)operator(\))operator(\))operator(\))

operator(()reserved(defmacro) ident(check-box) operator([) ident(&) operator({)symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()ident(general-button) ident(JCheckBox) error(~)ident(opts)operator(\))operator(\))

operator(()reserved(defmacro) ident(check-box-menu-item) operator([) ident(&) operator({)symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()ident(general-button) ident(JCheckBoxMenuItem) error(~)ident(opts)operator(\))operator(\))

operator(()reserved(defmacro) ident(radio-button) operator([) ident(&) operator({)symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()ident(general-button) ident(JRadioButton) error(~)ident(opts)operator(\))operator(\))

operator(()reserved(defmacro) ident(radio-button-menu-item) operator([) ident(&) operator({)symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()ident(general-button) ident(JRadioButtonMenuItem) error(~)ident(opts)operator(\))operator(\))

operator(()reserved(defmacro) ident(toggle-button) operator([) ident(&) operator({)symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()ident(general-button) ident(JToggleButton) error(~)ident(opts)operator(\))operator(\))

operator(()reserved(defmacro) ident(button-group) operator([)ident(&) ident(buttons)operator(])
  error(`)operator(()reserved(doto) operator(()ident(ButtonGroup.)operator(\))
     error(~)error(@)operator(()reserved(map) operator(()reserved(fn) operator([)ident(btn)operator(])
	      error(`)operator(()reserved(.)ident(add) error(~)ident(btn)operator(\))operator(\)) ident(buttons)operator(\))operator(\))operator(\))operator(()reserved(ns) ident(clj-swing.combo-box)
  operator(()symbol(:use) operator([)ident(clj-swing.core)operator(])
	operator([)ident(clojure.contrib.swing-utils) symbol(:only) operator([)ident(do-swing)operator(])operator(])operator(\))
  operator(()symbol(:import) operator(()ident(javax.swing) ident(JComboBox) ident(ComboBoxModel) ident(MutableComboBoxModel)operator(\))
	   operator(()ident(javax.swing.event) ident(ListDataEvent) ident(ListDataListener)operator(\))operator(\))operator(\))

operator(()reserved(def) ident(*cb-known-keys*) operator([)symbol(:action)operator(])operator(\))

operator(()reserved(defmacro) ident(commbo-box-model) operator([)ident(&) operator({)ident(mutable) symbol(:mutable)
			       operator([)operator([)operator(]) ident(&) ident(size-code)operator(]) symbol(:size)
			       operator([)operator([)ident(get-idx)operator(]) ident(&) ident(get-code)operator(]) symbol(:get)
			       operator([)operator([)ident(a-l-l)operator(]) ident(&) ident(add-listener-code)operator(]) symbol(:add-listener)
			       operator([)operator([)ident(r-l-l)operator(]) ident(&) ident(remove-listener-code)operator(]) symbol(:remove-listener)
			       
			       operator([)operator([)operator(]) ident(&) ident(get-selected-item-code)operator(]) symbol(:get-selected-item)
			       operator([)operator([)ident(s-s-i-item)operator(]) ident(&) ident(set-selected-item-code)operator(]) symbol(:set-selected-item)

			       operator([)operator([)ident(add-item)operator(]) ident(&) ident(add-code)operator(]) symbol(:add) 
			       operator([)operator([)ident(add-at-item) ident(add-at-idx)operator(]) ident(&) ident(add-at-code)operator(]) symbol(:add-at) 
			       operator([)operator([)ident(remove-item)operator(]) ident(&) ident(remove-code)operator(]) symbol(:remove) 
			       operator([)operator([)ident(remove-idx)operator(]) ident(&) ident(remove-at-code)operator(]) symbol(:remove-at) 

operator(})operator(])
  error(`)operator(()reserved(proxy) operator([)error(~)operator(()reserved(if) ident(mutable) operator(')ident(MutableComboBoxModel) operator(')ident(ComboBoxModel)operator(\))operator(]) operator([)operator(])

comment(;; Code for List model)
     operator(()ident(getSize) operator([)operator(])
	      error(~)ident(@size-code)operator(\))
     operator(()ident(getElementAt) operator([)error(~)ident(get-idx)operator(])
		   error(~)ident(@get-code)operator(\))
     operator(()ident(addListDataListener) operator([)error(~)ident(a-l-l)operator(])
			  error(~)ident(@add-listener-code)operator(\))
     operator(()ident(removeListDataListener) operator([)error(~)ident(r-l-l)operator(])
			  error(~)ident(@remove-listener-code)operator(\))

comment(;; Code for Combobox Model)
     operator(()ident(getSelectedItem) operator([)operator(])
		      error(~)ident(@get-selected-item-code)operator(\))
     operator(()ident(setSelectedItem) operator([)error(~)ident(s-s-i-item)operator(])
		      error(~)ident(@set-selected-item-code)operator(\))

comment(;; Code for mutable combobox model)
     error(~)error(@)operator(()reserved(if) ident(mutable)
       operator([)
	error(`)operator(()ident(addElement) operator([)error(~)ident(add-item)operator(]) 
		     error(~)ident(@add-code)operator(\))
	error(`)operator(()ident(insertElementAt) operator([)error(~)ident(add-at-item) error(~)ident(add-at-idx)operator(]) 
		     error(~)ident(@add-at-code)operator(\))
	error(`)operator(()ident(removeElement) operator([)error(~)ident(remove-item)operator(]) 
		     error(~)ident(@remove-code)operator(\))
	error(`)operator(()ident(removeElementAt) operator([)error(~)ident(remove-idx)operator(]) 
		     error(~)ident(@remove-at-code)operator(\))operator(])operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(seq-ref-combobox-model) operator([)ident(seq-ref) ident(&) operator([)ident(selected)operator(])operator(])
  operator(()reserved(let) operator([)ident(selected) operator(()reserved(or) ident(selected) operator(()reserved(atom) ident(nil)operator(\))operator(\))
	ident(listeners) operator(()reserved(atom) error(#)operator({)operator(})operator(\))
	reserved(key) operator(()reserved(gensym) string<delimiter(")content(seq-ref-combobox-model-watch)delimiter(")>operator(\))
	ident(m) operator(()ident(commbo-box-model)
	   symbol(:mutable) pre_constant(true)
	   symbol(:size) operator(()operator([)operator(]) operator(()reserved(count) ident(@seq-ref)operator(\))operator(\))
	   symbol(:get-selected-item) operator(()operator([)operator(]) operator(()reserved(dosync) operator(()reserved(if) operator(()reserved(and) ident(@selected) operator(()reserved(some) operator(#()error(=) ident(@selected) ident(%)operator(\)) ident(@seq-ref)operator(\))operator(\)) ident(@selected) operator(()reserved(swap!) ident(selected) operator(()reserved(constantly) ident(nil)operator(\))operator(\))operator(\))operator(\))operator(\))
	   symbol(:set-selected-item) operator(()operator([)ident(i)operator(]) operator(()reserved(dosync) operator(()reserved(if) operator(()reserved(and) ident(i) operator(()reserved(some) operator(#()error(=) ident(i) ident(%)operator(\)) ident(@seq-ref)operator(\))operator(\)) operator(()reserved(swap!) ident(selected) operator(()reserved(constantly) ident(i)operator(\))operator(\)) operator(()reserved(swap!) ident(selected) operator(()reserved(constantly) ident(nil)operator(\))operator(\))operator(\))operator(\))operator(\))
	   symbol(:add-listener) operator(()operator([)ident(l)operator(]) operator(()reserved(swap!) ident(listeners) reserved(conj) ident(l)operator(\))operator(\))
	   symbol(:remove-listener) operator(()operator([)ident(l)operator(]) operator(()reserved(swap!) ident(listeners) reserved(disj) ident(l)operator(\))operator(\))
	   symbol(:get) operator(()operator([)ident(i)operator(]) operator(()reserved(if) operator(()ident(has-index?) ident(@seq-ref) ident(i)operator(\)) operator(()reserved(nth) ident(@seq-ref) ident(i)operator(\)) ident(nil)operator(\))operator(\))
	   symbol(:add) operator(()operator([)ident(itm)operator(]) operator(()reserved(dosync) operator(()reserved(alter) ident(seq-ref) reserved(conj) ident(itm)operator(\))operator(\))operator(\))
	   symbol(:add-at) operator(()operator([)ident(itm) ident(idx)operator(]) operator(()reserved(dosync) 
			       operator(()reserved(if) operator(()reserved(vector?) ident(@seq-ref)operator(\))
				 operator(()reserved(alter) ident(seq-ref) operator(#()reserved(vec) operator(()ident(insert-at) ident(%) ident(idx) ident(itm)operator(\))operator(\))operator(\))
				 operator(()reserved(alter) ident(seq-ref) ident(insert-at) ident(idx) ident(itm)operator(\))operator(\))operator(\))operator(\))
	   symbol(:remove) operator(()operator([)ident(itm)operator(]) operator(()reserved(dosync) 
			       operator(()reserved(if) operator(()reserved(vector?) ident(@seq-ref)operator(\))
				 operator(()reserved(alter) ident(seq-ref) operator(#()reserved(vec) operator(()reserved(remove) operator(()reserved(partial) error(=) ident(itm)operator(\)) ident(%)operator(\))operator(\))operator(\))
				 operator(()reserved(alter) ident(seq-ref) operator(#()reserved(remove) operator(()reserved(partial) error(=) ident(itm)operator(\)) ident(%)operator(\))operator(\))operator(\))operator(\))operator(\))
	   symbol(:remove-at) operator(()operator([)ident(idx)operator(]) operator(()reserved(dosync) 
			       operator(()reserved(if) operator(()reserved(vector?) ident(@seq-ref)operator(\))
				 operator(()reserved(alter) ident(seq-ref) operator(#()reserved(vec) operator(()ident(drop-nth) ident(%) ident(idx)operator(\))operator(\))operator(\))
				 operator(()reserved(alter) ident(seq-ref) ident(drop-nth) ident(idx)operator(\))operator(\))operator(\))operator(\))operator(\))operator(])
    operator(()reserved(add-watch) ident(seq-ref) reserved(key) 
		    operator(()reserved(fn) operator([)ident(_) ident(_) ident(_) ident(state)operator(])
		      operator(()ident(do-swing)
		       operator(()reserved(let) operator([)ident(m) operator(()ident(ListDataEvent.) ident(m) operator(()ident(ListDataEvent/CONTENTS_CHANGED)operator(\)) integer(0) operator(()reserved(count) ident(state)operator(\))operator(\))operator(])
			operator(()reserved(doseq) operator([)ident(l) ident(@listeners)operator(])
			  operator(()reserved(.)ident(contentsChanged) ident(l) ident(m)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
    ident(m)operator(\))operator(\))
    
     


operator(()reserved(defmacro) ident(combo-box) operator([)operator([)ident(&) ident(items)operator(]) ident(&) operator({)ident(action) symbol(:action) symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()reserved(doto) operator(()ident(JComboBox.)operator(\))
     error(~)error(@)operator(()reserved(if) ident(action)  
	 operator([)error(`)operator(()ident(add-action-listener) error(~)ident(action)operator(\))operator(])operator(\))
     error(~)error(@)operator(()ident(auto-setters) ident(JComboBox) ident(*cb-known-keys*) ident(opts)operator(\))
     error(~)error(@)operator(()reserved(map) operator(#()reserved(list) operator(')reserved(.)ident(addItem) ident(%)operator(\)) ident(items)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(selected-item) operator([)ident(obj)operator(])
  operator(()reserved(.)ident(getSelectedItem) ident(obj)operator(\))operator(\))


comment(;; TODO Add list cell renderer proxy stuff(ns clj-swing.core)
  operator(()symbol(:import) operator(()ident(java.awt.event) ident(ActionListener)operator(\))
	   operator(()ident(javax.swing) ident(ImageIcon)operator(\))operator(\))
  operator(()symbol(:require) operator([)ident(clojure.contrib.string) symbol(:as) ident(st)operator(])operator(\))operator(\))

operator(()reserved(defn) ident(kw-to-setter) operator([)ident(kw)operator(])
  operator(()reserved(symbol) operator(()reserved(apply) reserved(str) string<delimiter(")content(set)delimiter(")> operator(()reserved(map) ident(st/capitalize) operator(()ident(st/split) string<delimiter(#")content(-)delimiter(")> operator(()reserved(name) ident(kw)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(group-container-args) operator([)ident(args)operator(])
  operator(()reserved(reduce) 
   operator(()reserved(fn) operator([)operator({)ident(options) symbol(:options) ident(kw) symbol(:kw) ident(state) symbol(:state) symbol(:as) ident(r)operator(}) ident(arg)operator(])
     operator(()reserved(cond)
      operator(()error(=) ident(state) symbol(:forms)operator(\))
      operator(()reserved(update-in) ident(r) operator([)symbol(:forms)operator(]) reserved(conj) ident(arg)operator(\))
      ident(kw)
      operator(()reserved(assoc) ident(r) symbol(:options) operator(()reserved(assoc) ident(options) ident(kw) ident(arg)operator(\)) symbol(:kw) ident(nil)operator(\))
      operator(()reserved(keyword?) ident(arg)operator(\))
      operator(()reserved(assoc) ident(r) symbol(:kw) ident(arg)operator(\))
      operator(()reserved(vector?) ident(arg)operator(\))
      operator(()reserved(assoc) ident(r) symbol(:bindings) ident(arg) symbol(:state) symbol(:forms)operator(\))operator(\))operator(\))
   operator({)symbol(:options) operator({)operator(}) symbol(:kw) ident(nil) symbol(:state) symbol(:options) symbol(:forms) operator([)operator(])operator(}) ident(args)operator(\))operator(\))

operator(()reserved(defn) ident(remove-known-keys) operator([)ident(m) ident(ks)operator(])
  operator(()reserved(reduce) reserved(dissoc) ident(m) ident(ks)operator(\))operator(\))

operator(()reserved(defn) ident(has-index?) operator([)reserved(seq) ident(idx)operator(])
  operator(()reserved(and) operator(()reserved(>)error(=) ident(idx) integer(0)operator(\)) operator(()reserved(<) ident(idx) operator(()reserved(count) reserved(seq)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(icon-setters) operator([)ident(names) ident(opts)operator(])
  operator(()reserved(if) ident(opts)
    operator(()reserved(remove) 
     reserved(nil?)
     operator(()reserved(map)
      operator(()reserved(fn) operator([)reserved(name)operator(]) 
	operator(()reserved(when-let) operator([)ident(icon) operator(()ident(opts) reserved(name)operator(\))operator(]) 
	  error(`)operator(()reserved(.)  error(~)operator(()ident(kw-to-setter) reserved(name)operator(\)) operator(()reserved(.)ident(getImage) operator(()ident(ImageIcon.) error(~)ident(icon)operator(\))operator(\))operator(\))operator(\))operator(\)) ident(names)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(auto-setters) operator([)ident(cl) ident(known-kws) ident(opts)operator(])
  operator(()reserved(if) ident(opts)
    operator(()reserved(map) operator(()reserved(fn) operator([)operator([)ident(a) ident(v)operator(])operator(]) operator(()reserved(list) 
		      operator(')reserved(.) 
		      operator(()ident(kw-to-setter) ident(a)operator(\)) 
		      operator(()reserved(if) operator(()reserved(keyword?) ident(v)operator(\))
			error(`)operator(()reserved(.) error(~)ident(cl) error(~)operator(()reserved(symbol) operator(()ident(st/upper-case) operator(()reserved(name) ident(v)operator(\))operator(\))operator(\))operator(\))
			ident(v)operator(\))operator(\))operator(\))
	 operator(()ident(remove-known-keys) ident(opts) ident(known-kws)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(insert-at) operator([)reserved(seq) ident(idx) ident(item)operator(])
  operator(()reserved(concat) operator(()reserved(take) ident(idx) reserved(seq)operator(\)) operator([)ident(item)operator(]) operator(()reserved(drop) ident(idx) reserved(seq)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(drop-nth) operator([)reserved(seq) ident(idx)operator(])
  operator(()reserved(concat) operator(()reserved(take) ident(idx) reserved(seq)operator(\)) operator(()reserved(drop) operator(()reserved(inc) ident(idx)operator(\)) reserved(seq)operator(\))operator(\))operator(\))

operator(()reserved(defmacro) ident(add-action-listener) operator([)ident(obj) operator([)operator([)ident(event)operator(]) ident(&) ident(code)operator(])operator(])
  error(`)operator(()reserved(doto) error(~)ident(obj)
     operator(()reserved(.)ident(addActionListener)
      operator(()reserved(proxy) operator([)ident(ActionListener)operator(]) operator([)operator(])
	operator(()ident(actionPerformed) operator([)error(~)ident(event)operator(])
			 error(~)ident(@code)operator(\))operator(\))operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(<3) operator([)ident(love) ident(&) ident(loves)operator(]) 
  operator(()reserved(loop) operator([)ident(l) operator(()reserved(str) string<delimiter(")content(I love )delimiter(")> ident(love)operator(\)) ident(loves) ident(loves)operator(])
    operator(()reserved(let) operator([)operator([)ident(love) ident(&) ident(loves)operator(]) ident(loves)operator(])
      operator(()reserved(if) operator(()reserved(nil?) ident(love)operator(\))
	operator(()reserved(str) ident(l) string<delimiter(")content(.)delimiter(")>operator(\))
	operator(()reserved(if) operator(()reserved(empty?) ident(loves)operator(\))
	  operator(()reserved(str) ident(l) string<delimiter(")content( and )delimiter(")> ident(love) string<delimiter(")content(.)delimiter(")>operator(\))
	  operator(()reserved(recur) operator(()reserved(str) ident(l) string<delimiter(")content(, )delimiter(")> ident(love)operator(\)) ident(loves)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
operator(()reserved(ns) ident(clj-swing.document)
  operator(()symbol(:use) operator([)ident(clojure.contrib.swing-utils) symbol(:only) operator([)ident(do-swing)operator(])operator(])operator(\))
  operator(()symbol(:require) operator([)ident(clojure.contrib.string) symbol(:as) ident(st)operator(])operator(\))
  operator(()symbol(:import) operator([)ident(javax.swing.text) ident(AbstractDocument) ident(Position) ident(Element) ident(PlainDocument)operator(])
	   operator([)ident(javax.swing.event) ident(DocumentEvent) ident(DocumentListener)operator(])
	   ident(javax.swing.event.DocumentEvent$EventType)
	   ident(javax.swing.event.DocumentEvent$ElementChange)
	   ident(javax.swing.text.AbstractDocument$Content)operator(\))operator(\))

operator(()reserved(defn-) ident(update-positions) operator([)ident(positions) ident(offset) ident(change)operator(])
  operator(()reserved(doall) 
   operator(()reserved(map) 
    operator(()reserved(fn) operator([)ident(p)operator(])
      operator(()reserved(if) operator(()reserved(>)error(=) ident(@p) ident(offset)operator(\))
	operator(()reserved(swap!) ident(p) reserved(+) ident(change)operator(\))
	ident(p)operator(\))operator(\))
    ident(positions)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(str-insert) operator([)ident(s) ident(offset) ident(new-s)operator(])
  operator(()reserved(str) operator(()ident(st/take) ident(offset) ident(s)operator(\)) ident(new-s) operator(()ident(st/drop) ident(offset) ident(s)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(str-remove) operator([)ident(s) ident(offset) ident(cnt)operator(])
  operator(()reserved(str) operator(()ident(st/take) ident(offset) ident(s)operator(\)) operator(()ident(st/drop) operator(()reserved(+) ident(offset) ident(cnt)operator(\)) ident(s)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(string-ref-content) operator([)ident(str-ref)operator(])
  operator(()reserved(let) operator([)ident(positions) operator(()reserved(atom) operator([)operator(])operator(\))operator(])
    operator(()reserved(proxy) operator([)ident(AbstractDocument$Content)operator(]) operator([)operator(])
      operator(()ident(createPosition) operator([)ident(offset)operator(])
		      operator(()reserved(let) operator([)ident(p) operator(()reserved(atom) ident(offset)operator(\))operator(])
			operator(()reserved(swap!) ident(positions) reserved(conj) ident(p)operator(\))
			operator(()reserved(proxy) operator([)ident(Position)operator(]) operator([)operator(])
			  operator(()ident(getOffset) operator([)operator(]) ident(@p)operator(\))operator(\))operator(\))operator(\))

      operator(()ident(getChars) operator([)ident(where) ident(len) ident(txt)operator(])
		operator(()reserved(let) operator([)ident(s) operator(()reserved(max) integer(0) operator(()reserved(min) ident(where) ident(len)operator(\))operator(\))
		      ident(e) operator(()reserved(max) integer(0) operator(()reserved(min) ident(where) ident(len) operator(()reserved(.)ident(length) ident(@str-ref)operator(\))operator(\))operator(\))operator(])
		  operator(()reserved(println) string<delimiter(")content(A:)delimiter(")> ident(@str-ref) ident(where) ident(len)operator(\))
		  operator(()ident(set!) operator(()reserved(.) ident(txt) ident(array)operator(\)) operator(()reserved(into-array) ident(Character/TYPE) operator(()reserved(seq) operator(()reserved(subs) ident(@str-ref) ident(s) ident(e)operator(\))operator(\))operator(\))operator(\))
		  operator(()reserved(println) string<delimiter(")content(B)delimiter(")>operator(\))
		  operator(()reserved(prn) operator(()reserved(seq) operator(()reserved(.) ident(txt) ident(array)operator(\))operator(\))operator(\))operator(\))operator(\))

      operator(()ident(getString) operator([)ident(where) ident(len)operator(])
		 operator(()reserved(let) operator([)ident(s) operator(()reserved(max) integer(0) operator(()reserved(min) ident(where) ident(len)operator(\))operator(\))
		      ident(e) operator(()reserved(max) integer(0) operator(()reserved(min) ident(where) ident(len) operator(()reserved(.)ident(length) ident(@str-ref)operator(\))operator(\))operator(\))operator(])
		   operator(()reserved(subs) ident(@str-ref) ident(s) ident(e)operator(\))operator(\))operator(\))

      operator(()ident(length) operator([)operator(])
	     operator(()reserved(.)ident(length) ident(@str-ref)operator(\))operator(\))

      operator(()ident(insertString) operator([)ident(where) reserved(str)operator(])
		    operator(()reserved(swap!) ident(positions) ident(update-positions) ident(where) operator(()reserved(.)ident(length) reserved(str)operator(\))operator(\))
		    operator(()reserved(dosync)
		     operator(()reserved(alter) ident(str-ref) ident(str-insert) ident(where) reserved(str)operator(\))operator(\))
		    ident(nil)operator(\))

      operator(()reserved(remove) operator([)ident(where) ident(nitems)operator(]) 
	      operator(()reserved(swap!) ident(positions) ident(update-positions) ident(where) operator(()reserved(-) integer(0) ident(nitems)operator(\))operator(\))
	      operator(()reserved(dosync) 
	       operator(()reserved(alter) ident(str-ref) ident(str-remove) ident(where) ident(nitems)operator(\))operator(\))
	      ident(nil)operator(\))operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(plain-str-ref-document) operator([)ident(str-ref)operator(])
  operator(()ident(PlainDocument.) operator(()ident(string-ref-content) ident(str-ref)operator(\))operator(\))operator(\))

operator(()reserved(comment) reserved(defn) ident(abstract-str-ref-document) operator([)ident(str-ref)operator(])
  operator(()reserved(let) operator([)ident(d) operator(()reserved(proxy) operator([)ident(AbstractDocument)operator(])  operator([)operator(()ident(string-ref-content) ident(str-ref)operator(\))operator(])operator(\))operator(])
    operator(()reserved(add-watch) ident(str-ref) operator(()reserved(gensym) string<delimiter(")content(abstract-str-ref-document-watch)delimiter(")>operator(\))
	       operator(()reserved(fn) operator([)ident(_) ident(_) ident(_) ident(state)operator(])
		 operator(()reserved(.)ident(fireChangedUpdate) ident(d) operator(()reserved(proxy) operator([)ident(DocumentEvent)operator(]) operator([)operator(])
					 operator(()ident(getChange) operator([)ident(elem)operator(]) operator(()reserved(proxy) operator([)ident(DocumentEvent$ElementChange)operator(]) operator([)operator(])
							     operator(()ident(getChildrenAdded) operator([)operator(]) operator(()reserved(into-array) ident(Element)operator([)operator(])operator(\))operator(\))
							     operator(()ident(getChildrenRemoved) operator([)operator(]) operator(()reserved(into-array) ident(Element)operator([)operator(])operator(\))operator(\))
							     operator(()ident(getElement)operator([)operator(]) ident(elem)operator(\)) 
							     operator(()ident(getIndex)operator([)operator(]) integer(0)operator(\))operator(\))operator(\))
						    

					 operator(()ident(getDocument) operator([)operator(]) ident(d)operator(\))
					 operator(()ident(getLength) operator([)operator(]) operator(()reserved(.)ident(length) ident(state)operator(\))operator(\))
					 operator(()ident(getOffset) operator([)operator(]) integer(0)operator(\))
					 operator(()ident(getType) operator([)operator(]) operator(()ident(DocumentEvent$EventType/CHANGE)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
    operator(()reserved(.)ident(fireChangedUpdate) ident(d) operator(()reserved(proxy) operator([)ident(DocumentEvent)operator(]) operator([)operator(])
			    operator(()ident(getChange) operator([)ident(elem)operator(]) operator(()reserved(proxy) operator([)ident(DocumentEvent$ElementChange)operator(]) operator([)operator(])
						operator(()ident(getChildrenAdded) operator([)operator(]) operator(()reserved(into-array) ident(Element)operator([)operator(])operator(\))operator(\))
						operator(()ident(getChildrenRemoved) operator([)operator(]) operator(()reserved(into-array) ident(Element)operator([)operator(])operator(\))operator(\))
						operator(()ident(getElement)operator([)operator(]) ident(elem)operator(\)) 
						operator(()ident(getIndex)operator([)operator(]) integer(0)operator(\))operator(\))operator(\))
			    
			    
			    operator(()ident(getDocument) operator([)operator(]) ident(d)operator(\))
			    operator(()ident(getLength) operator([)operator(]) operator(()reserved(.)ident(length) ident(state)operator(\))operator(\))
			    operator(()ident(getOffset) operator([)operator(]) integer(0)operator(\))
			    operator(()ident(getType) operator([)operator(]) operator(()ident(DocumentEvent$EventType/CHANGE)operator(\))operator(\))operator(\))operator(\))
    ident(d)operator(\))operator(\))

operator(()reserved(defn) ident(add-str-ref-doc-listener) operator([)ident(doc-owner) ident(str-ref)operator(])
  operator(()reserved(let) operator([)reserved(doc) operator(()reserved(.)ident(getDocument) ident(doc-owner)operator(\))
	ident(watch-key) operator(()reserved(gensym) string<delimiter(")content(str-ref-doc-listener-watch)delimiter(")>operator(\))
	ident(watch-fn) operator(()reserved(fn) operator([)ident(l)operator(])
		   operator(()reserved(fn) operator([)ident(a) ident(b) ident(c) ident(state)operator(])
		     operator(()ident(do-swing)
		      operator(()reserved(.)ident(removeDocumentListener) reserved(doc) ident(l)operator(\))
		      operator(()reserved(.)reserved(remove) reserved(doc) integer(0) operator(()reserved(.)ident(getLength) reserved(doc)operator(\))operator(\))
		      operator(()reserved(.)ident(insertString) reserved(doc) integer(0) ident(state) ident(nil)operator(\))
		      operator(()reserved(.)ident(addDocumentListener) reserved(doc) ident(l)operator(\))operator(\))operator(\))operator(\))
	ident(l) operator(()reserved(proxy) operator([)ident(DocumentListener)operator(]) operator([)operator(])
	    operator(()ident(insertUpdate) operator([)ident(event)operator(])
			  operator(()reserved(let) operator([)ident(offset) operator(()reserved(.)ident(getOffset) ident(event)operator(\))operator(])
			     operator(()reserved(remove-watch) ident(str-ref) ident(watch-key)operator(\))
			     operator(()reserved(dosync) operator(()reserved(alter) ident(str-ref) ident(str-insert) ident(offset) operator(()reserved(.)ident(getText) reserved(doc) ident(offset) operator(()reserved(.)ident(getLength) ident(event)operator(\))operator(\))operator(\))operator(\))
			     operator(()reserved(add-watch) ident(str-ref) ident(watch-key) operator(()ident(watch-fn) ident(this)operator(\))operator(\))operator(\))operator(\))
	    operator(()ident(removeUpdate) operator([)ident(event)operator(])
			   operator(()reserved(remove-watch)  ident(str-ref) ident(watch-key)operator(\))
			   operator(()reserved(dosync) operator(()reserved(alter) ident(str-ref) ident(str-remove) operator(()reserved(.)ident(getOffset) ident(event)operator(\)) operator(()reserved(.)ident(getLength) ident(event)operator(\))operator(\))operator(\))
			   operator(()reserved(add-watch) ident(str-ref) ident(watch-key) operator(()ident(watch-fn) ident(this)operator(\))operator(\))operator(\))
	    operator(()ident(changedUpdate) operator([)ident(event)operator(])operator(\))operator(\))operator(])
    operator(()reserved(if) operator(()reserved(<) integer(0) operator(()reserved(.)ident(getLength) reserved(doc)operator(\))operator(\))
      operator(()reserved(.)reserved(remove) reserved(doc) integer(0) operator(()reserved(.)ident(getOffset) operator(()reserved(.)ident(getEndPosition) reserved(doc)operator(\))operator(\))operator(\))operator(\))
    operator(()reserved(.)ident(insertString) reserved(doc) integer(0) ident(@str-ref) ident(nil)operator(\))
    operator(()reserved(.)ident(addDocumentListener) reserved(doc) ident(l)operator(\))
    operator(()reserved(add-watch) ident(str-ref) ident(watch-key) operator(()ident(watch-fn) ident(l)operator(\))operator(\))operator(\))operator(\))
operator(()reserved(ns) ident(clj-swing.example)
  operator(()symbol(:use) operator([)ident(clj-swing) ident(core) ident(frame) ident(label) ident(button) ident(combo-box) reserved(list) ident(panel) ident(document) ident(text-field)operator(])operator(\))operator(\))

operator(()reserved(import) operator(')operator(()ident(javax.swing)  ident(UIManager)operator(\))
	operator(')operator(()ident(java.awt) ident(BasicStroke) ident(Color) ident(Dimension) ident(Graphics) ident(Graphics2D) ident(RenderingHints)operator(\))
	operator(')operator(()ident(java.awt.geom) ident(AffineTransform) ident(Ellipse2D)operator(\))
	operator(')operator(()ident(java.awt) ident(GridBagLayout) ident(FlowLayout) ident(GridLayout) ident(GridBagConstraints)operator(\))operator(\))

operator(()reserved(def) ident(sr) operator(()reserved(ref) operator(')operator([)string<delimiter(")content(Quick sort)delimiter(")> string<delimiter(")content(Bubble Sort)delimiter(")>operator(])operator(\))operator(\))
operator(()reserved(def) ident(lm) operator(()reserved(ref) operator(')operator([)string<delimiter(")content(Bla)delimiter(")> string<delimiter(")content(Blubb)delimiter(")>operator(])operator(\))operator(\))
operator(()reserved(def) ident(str-ref) operator(()reserved(ref) string<delimiter(")content(A String!)delimiter(")>operator(\))operator(\))

operator(()reserved(def) ident(selected) operator(()reserved(atom) ident(nil)operator(\))operator(\))

operator(()reserved(def) ident(nativeLF) operator(()reserved(.) ident(UIManager) ident(getSystemLookAndFeelClassName)operator(\))operator(\))

operator(()reserved(.) ident(UIManager) ident(setLookAndFeel) ident(nativeLF)operator(\))

operator(()reserved(defn) ident(paint-donut) operator([)ident(g)operator(])
  operator(()reserved(println) string<delimiter(")content(y!!!o)delimiter(")>operator(\))
  operator(()reserved(let) operator([)ident(width) integer(360)
	ident(height) integer(310)
	ident(ellipse) operator(()reserved(new) ident(java.awt.geom.Ellipse2D$Double) integer(0) integer(0) integer(80) integer(130)operator(\))
	ident(at) operator(()ident(AffineTransform/getTranslateInstance) operator(()reserved(/) ident(width) integer(2)operator(\)) operator(()reserved(/) ident(height) integer(2)operator(\))operator(\))operator(])
    operator(()reserved(doto) ident(g)
      operator(()reserved(.)ident(setStroke) operator(()ident(BasicStroke.) integer(1)operator(\))operator(\))
      operator(()reserved(.)ident(setColor) operator(()reserved(.) ident(Color) ident(gray)operator(\))operator(\))operator(\))
    operator(()reserved(doseq) operator([)ident(i) operator(()reserved(range) integer(0) integer(361) integer(5)operator(\))operator(])
      operator(()reserved(.)ident(rotate) ident(g) operator(()ident(Math/toRadians) ident(i)operator(\))operator(\))
      operator(()reserved(.)ident(draw) ident(g) operator(()reserved(.)ident(createTransformedShape) ident(at) ident(ellipse)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(graphics-example) operator([)operator(])
  operator(()ident(frame)
   symbol(:title) string<delimiter(")content(Graphics example)delimiter(")> 
   symbol(:show) pre_constant(true) symbol(:pack) pre_constant(true)
   operator([)ident(p) operator(()ident(panel)
       symbol(:preferred-size) operator([)integer(360) integer(310)operator(])
       symbol(:focusable) pre_constant(true)
       symbol(:paint) operator(()operator([)ident(g)operator(])
		 operator(()reserved(proxy-super) ident(paintComponent) ident(g)operator(\))
		 operator(()ident(paint-donut) ident(g)operator(\))operator(\))operator(\))operator(])operator(\))operator(\))

operator(()reserved(defn) ident(grid-bag-example) operator([)operator(])
  operator(()ident(frame) symbol(:title) string<delimiter(")content(Sort Visualizer)delimiter(")> symbol(:layout) symbol(:grid-bag)
	 symbol(:show) pre_constant(true) symbol(:pack) pre_constant(true)
	 operator([)symbol(:gridx) integer(0) symbol(:gridy) integer(0) symbol(:anchor) symbol(:LINE_END)
	  ident(_) operator(()ident(label) string<delimiter(")content(Algorithms)delimiter(")>operator(\))
	  symbol(:gridy) integer(1)
	  ident(_) operator(()ident(label) string<delimiter(")content(Button)delimiter(")>operator(\))
	  symbol(:gridx) integer(1) symbol(:gridy) integer(0) symbol(:anchor) symbol(:LINE_START)
	  ident(_) operator(()ident(combo-box) operator([)operator(]) symbol(:model) operator(()ident(seq-ref-combobox-model) ident(sr) ident(selected)operator(\))operator(\))
	  symbol(:gridy) integer(1)
	  ident(_) operator(()ident(button) string<delimiter(")content(Run Algorithm)delimiter(")> 
		    symbol(:action) operator(()operator([)ident(_)operator(]) operator(()reserved(if) ident(@selected) operator(()reserved(dosync) operator(()reserved(alter) ident(lm) reserved(conj) ident(@selected)operator(\))operator(\))operator(\))operator(\))operator(\))
	  symbol(:gridx) integer(0) symbol(:gridy) integer(2) symbol(:gridwidth) integer(2) symbol(:anchor) symbol(:LINE_START)
	  ident(_) operator(()ident(text-field) symbol(:str-ref) ident(str-ref) symbol(:columns) integer(10)operator(\))
	  symbol(:gridx) integer(3) symbol(:gridy) integer(0) symbol(:gridheight) integer(3) symbol(:anchor) symbol(:CENTER)
	  ident(_) operator(()ident(scroll-panel) operator(()ident(jlist) symbol(:model) operator(()ident(seq-ref-list-model) ident(lm)operator(\))operator(\)) symbol(:preferred-size) operator([)integer(150) integer(100)operator(])operator(\))operator(])operator(\))operator(\))

operator(()reserved(defn) ident(button-example) operator([)operator(])
  operator(()ident(frame) symbol(:title) string<delimiter(")content(A Button Example)delimiter(")>
	 symbol(:layout) operator(()ident(FlowLayout.)operator(\))
	 symbol(:size) operator([)integer(220) integer(90)operator(])
	 symbol(:show) pre_constant(true)
	 operator([)ident(b1) operator(()ident(button) string<delimiter(")content(First)delimiter(")>operator(\))
	  ident(b2) operator(()ident(button) string<delimiter(")content(Second)delimiter(")>operator(\))
	  ident(lab) operator(()ident(label) string<delimiter(")content(Press a button)delimiter(")>operator(\))operator(])
	 operator(()ident(add-action-listener) ident(b1) operator(()operator([)ident(e)operator(]) operator(()reserved(println) string<delimiter(")content(listener called)delimiter(")>operator(\))operator(\))operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(c-to-f) operator([)ident(c)operator(])
  operator(()reserved(+) operator(()reserved(*) ident(c) integer(9/5)operator(\)) integer(32)operator(\))operator(\))

operator(()reserved(defn) ident(f-to-c) operator([)ident(f)operator(])
  operator(()reserved(*) operator(()reserved(-) ident(f) integer(32)operator(\)) integer(5/9)operator(\))operator(\))


operator(()reserved(defn) ident(convert-temp) operator([)ident(converter) ident(temp)operator(])
  operator(()reserved(constantly) operator(()reserved(str) operator(()ident(Math/round) operator(()reserved(float) operator(()ident(converter) operator(()ident(Double/parseDouble) operator(()reserved(.)ident(trim) ident(temp)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(converter-example) operator([)operator(])
  operator(()reserved(let) operator([)ident(c) operator(()reserved(ref) string<delimiter(")delimiter(")>operator(\))
	ident(f) operator(()reserved(ref) string<delimiter(")delimiter(")>operator(\))operator(])
    operator(()ident(frame) symbol(:layout) symbol(:grid-bag) symbol(:show) pre_constant(true) symbol(:pack) ident(truef)
	  operator([)symbol(:gridx) integer(0) symbol(:gridy) integer(0) symbol(:anchor) symbol(:LINE_END)
	   ident(_) operator(()ident(label) string<delimiter(")content(C)delimiter(")>operator(\))
	   symbol(:gridy) integer(1)
	   ident(_) operator(()ident(label) string<delimiter(")content(F)delimiter(")>operator(\))
	   symbol(:gridx) integer(1) symbol(:anchor) symbol(:LINE_START)
	   ident(_) operator(()ident(text-field) symbol(:str-ref) ident(f) symbol(:columns) integer(10)
			 symbol(:action) operator(()operator([)ident(_)operator(])
				    operator(()reserved(println) ident(@f)operator(\))
				    operator(()reserved(if) operator(()reserved(re-find) string<delimiter(#")content(^)content(\\d)content(+$)delimiter(")> ident(@f)operator(\))
				      operator(()reserved(dosync) operator(()reserved(alter) ident(c) operator(()ident(convert-temp) ident(f-to-c)  ident(@f)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
	   symbol(:gridy) integer(0)
	   ident(_) operator(()ident(text-field) symbol(:str-ref) ident(c) symbol(:columns) integer(10)
			 symbol(:action) operator(()operator([)ident(_)operator(])
				    operator(()reserved(println) ident(@c)operator(\))
				    operator(()reserved(if) operator(()reserved(re-find) string<delimiter(#")content(^)content(\\d)content(+$)delimiter(")> ident(@c)operator(\))
				      operator(()reserved(dosync) operator(()reserved(alter) ident(f) operator(()ident(convert-temp) ident(c-to-f)  ident(@c)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(])operator(\))operator(\))operator(\))operator(()reserved(ns) ident(clj-swing.frame)
  operator(()symbol(:use) operator([)ident(clj-swing.core) symbol(:only) operator([)ident(group-container-args) ident(icon-setters) ident(auto-setters)operator(])operator(])
	operator([)ident(clojure.contrib.swing-utils) symbol(:only) operator([)ident(do-swing)operator(])operator(])operator(\))
  operator(()symbol(:import) operator(()ident(javax.swing) ident(JFrame) ident(ImageIcon)operator(\))
	   operator(()ident(java.awt) ident(GridBagLayout) ident(GridLayout) ident(GridBagConstraints)operator(\))operator(\))
  operator(()symbol(:require) operator([)ident(clojure.contrib.java-utils) symbol(:as) ident(java)operator(])operator(\))operator(\))


operator(()reserved(defmacro) ident(set-constraint!) operator([)ident(constraints) ident(field) ident(value)operator(])
  error(`)operator(()ident(set!) operator(()reserved(.) error(~)ident(constraints) error(~)operator(()reserved(symbol) operator(()reserved(name) ident(field)operator(\))operator(\))operator(\))
         error(~)operator(()reserved(if) operator(()reserved(keyword?) ident(value)operator(\))
	    error(`)operator(()ident(java/wall-hack-field)  operator(()reserved(class) error(~)ident(constraints)operator(\)) operator(')error(~)operator(()reserved(symbol) operator(()reserved(name) ident(value)operator(\))operator(\))  operator(()reserved(class) error(~)ident(constraints)operator(\))operator(\))
            ident(value)operator(\))operator(\))operator(\))

operator(()reserved(def) ident(*frame-on-close-actions*)
  operator({)symbol(:do-nothing) operator(()ident(JFrame/DO_NOTHING_ON_CLOSE)operator(\))
   symbol(:exit) operator(()ident(JFrame/EXIT_ON_CLOSE)operator(\))
   symbol(:hide) operator(()ident(JFrame/HIDE_ON_CLOSE)operator(\))
   symbol(:dispose) operator(()ident(JFrame/DISPOSE_ON_CLOSE)operator(\))operator(})operator(\))


operator(()reserved(def) ident(*frame-known-keys*)
     operator([)symbol(:name) symbol(:icon) symbol(:title) symbol(:layout) symbol(:constrains) symbol(:on-close) symbol(:size) symbol(:bounds) symbol(:location) symbol(:pack) symbol(:show) symbol(:centered)operator(])operator(\))

operator(()reserved(defmacro) ident(frame) operator([)ident(&) ident(args)operator(])
  string<delimiter(")content(options are:
:name - internal name of the frame.
:icon - icon, will be passed to javax.swing.ImageIcon.
:title - title for the frame.
:layout - layout manager.
:constrains - constrains object for the layout manager.
:on-close - one of :do-nothing, :exit, :hide, :dispose, 
  sets the default on close action for the frame.
:size - [w, h]
:bounds - [x, y, w, h]
:location - [x y]

:pack - shall the frame autopack at the end?
:show - shall the frame autoshow at the end?
)delimiter(")>
    operator(()reserved(let) operator([)ident(default-opts) operator({)operator(})
	  operator({)ident(forms) symbol(:forms) ident(opts) symbol(:options) ident(bindings) symbol(:bindings)operator(}) operator(()ident(group-container-args) ident(args)operator(\))
	  ident(opts) operator(()reserved(merge) ident(default-opts) ident(opts)operator(\))
	  ident(frame) operator(()reserved(or) operator(()symbol(:name) ident(opts)operator(\)) operator(()reserved(gensym) string<delimiter(")content(frame)delimiter(")>operator(\))operator(\))
	  ident(constrains) operator(()reserved(gensym) string<delimiter(")content(constrains)delimiter(")>operator(\))
	  ident(manager) operator(()reserved(gensym) string<delimiter(")content(manager)delimiter(")>operator(\))operator(])
      error(`)operator(()ident(do-swing) 
	operator(()reserved(let) operator([)error(~)ident(frame)  error(~)operator(()reserved(if) operator(()symbol(:title) ident(opts)operator(\))
			 error(`)operator(()ident(JFrame.) error(~)operator(()symbol(:title) ident(opts)operator(\))operator(\))
			 error(`)operator(()ident(JFrame.)operator(\))operator(\))
	      error(~)error(@)operator(()reserved(cond) 
		  operator(()error(=) operator(()symbol(:layout) ident(opts)operator(\)) symbol(:grid-bag)operator(\))
		  operator(()reserved(list) operator(')ident(_) error(`)operator(()reserved(.)ident(setLayout) error(~)ident(frame) operator(()reserved(new) ident(GridBagLayout)operator(\))operator(\))
		    error(`)error(~)ident(constrains) error(`)operator(()reserved(new) ident(GridBagConstraints)operator(\))operator(\))
		  operator(()error(=) operator(()symbol(:layout) ident(opts)operator(\)) symbol(:grid)operator(\))
		  operator([)operator(')ident(_) error(`)operator(()reserved(.)ident(setLayout) error(~)ident(frame) operator(()reserved(new) ident(GridLayout)operator(\))operator(\))operator(])
		  operator(()symbol(:layout) ident(opts)operator(\))
		  operator([)operator(')ident(_) error(`)operator(()reserved(.)ident(setLayout) error(~)ident(frame) error(~)operator(()symbol(:layout) ident(opts)operator(\))operator(\))operator(])operator(\))
	      error(~)error(@)operator(()reserved(if) operator(()symbol(:constrains) ident(opts)operator(\))
		 error(`)operator([)error(~)ident(constrains) error(~)operator(()symbol(:constrains) ident(opts)operator(\))operator(])operator(\))
	      error(~)error(@)operator(()reserved(if) operator(()reserved(or) operator(()symbol(:constrains) ident(opts)operator(\)) operator(()reserved(keyword?) operator(()symbol(:layout) ident(opts)operator(\))operator(\))operator(\))
		  operator(()reserved(reverse) 
		   operator(()reserved(reduce)
		    operator(()reserved(fn) operator([)ident(l) operator([)ident(f) ident(s)operator(])operator(])
		      operator(()reserved(if) operator(()reserved(keyword?) ident(f)operator(\))
			operator(()reserved(conj) operator(()reserved(conj) ident(l) operator(')ident(_)operator(\)) error(`)operator(()ident(set-constraint!) error(~)ident(constrains) error(~)ident(f) error(~)ident(s)operator(\))operator(\))
			operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) ident(l) ident(f)operator(\)) ident(s)operator(\)) operator(')ident(_)operator(\)) error(`)operator(()reserved(.)ident(add) error(~)ident(frame) error(~)ident(f) error(~)ident(constrains)operator(\))operator(\))operator(\))operator(\))
		    operator(')operator(()operator(\)) operator(()reserved(partition) integer(2) ident(bindings)operator(\))operator(\))operator(\))
		  operator(()reserved(reverse) 
		   operator(()reserved(reduce)
		    operator(()reserved(fn) operator([)ident(l) operator([)ident(f) ident(s)operator(])operator(])
		      operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) ident(l) ident(f)operator(\)) ident(s)operator(\)) operator(')ident(_)operator(\)) error(`)operator(()reserved(.)ident(add) error(~)ident(frame) error(~)ident(f)operator(\))operator(\))operator(\))
		    operator(')operator(()operator(\)) operator(()reserved(partition) integer(2) ident(bindings)operator(\))operator(\))operator(\))operator(\))operator(])
	  operator(()reserved(doto) error(~)ident(frame)
	    error(~)error(@)operator(()ident(icon-setters) operator([)symbol(:icon)operator(])  ident(opts)operator(\))
	    error(~)error(@)operator(()ident(auto-setters) ident(JFrame) ident(*frame-known-keys*) ident(opts)operator(\))
	    error(~)error(@)operator(()reserved(when-let) operator([)ident(on-close) operator(()ident(*frame-on-close-actions*) operator(()symbol(:on-close) ident(opts)operator(\))operator(\))operator(])
		operator([)error(`)operator(()reserved(.)ident(setDefaultCloseOperation) error(~)ident(on-close)operator(\))operator(])operator(\))
	    error(~)error(@)operator(()reserved(when-let) operator([)operator([)ident(w) ident(h)operator(]) operator(()symbol(:size) ident(opts)operator(\))operator(])
		operator([)error(`)operator(()reserved(.)ident(setSize) error(~)ident(w) error(~)ident(h)operator(\))operator(])operator(\))
	    error(~)error(@)operator(()reserved(when-let) operator([)operator([)ident(x) ident(y) ident(w) ident(h)operator(]) operator(()symbol(:bounds) ident(opts)operator(\))operator(])
		operator([)error(`)operator(()reserved(.)ident(setBounds) error(~)ident(x) error(~)ident(y) error(~)ident(w) error(~)ident(h)operator(\))operator(])operator(\))
	    error(~)error(@)operator(()reserved(when-let) operator([)operator([)ident(x) ident(y)operator(]) operator(()symbol(:location) ident(opts)operator(\))operator(])
		operator([)error(`)operator(()reserved(.)ident(setLocation) error(~)ident(x) error(~)ident(y)operator(\))operator(])operator(\))
	    error(~)error(@)operator(()reserved(if) operator(()reserved(contains?) ident(opts) symbol(:centered)operator(\))
		operator([)error(`)operator(()reserved(.)ident(setLocationRelativeTo) error(~)operator(()symbol(:centered) ident(opts)operator(\))operator(\))operator(])operator(\))
	    
	    error(~)ident(@forms)
	    
	    error(~)error(@)operator(()reserved(if) operator(()symbol(:pack) ident(opts)operator(\))
		operator([)error(`)operator(()reserved(.)ident(pack)operator(\))operator(])operator(\))
	    error(~)error(@)operator(()reserved(if) operator(()symbol(:show) ident(opts)operator(\))
		operator([)error(`)operator(()reserved(.)ident(setVisible) pre_constant(true)operator(\))operator(])operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(()reserved(ns) ident(clj-swing.label)
  operator(()symbol(:use) operator([)ident(clj-swing.core) symbol(:only) operator([)ident(add-action-listener) ident(icon-setters) ident(auto-setters)operator(])operator(])operator(\))
  operator(()symbol(:import) operator(()ident(javax.swing) ident(JLabel) ident(ImageIcon)operator(\))operator(\))operator(\))

operator(()reserved(defmacro) ident(label) 
  operator([)ident(caption) ident(&) operator({)ident(obj) symbol(:for) symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()reserved(let) operator([)ident(l)error(#) operator(()ident(JLabel.) error(~)ident(caption)operator(\))operator(])
     operator(()reserved(doto) ident(l)error(#)
       error(~)error(@)operator(()reserved(if) ident(obj) 
	   operator([)error(`)operator(()reserved(.)ident(setLabelFor) error(~)ident(obj)operator(\))operator(])operator(\))
       error(~)error(@)operator(()ident(icon-setters) operator([)symbol(:icon) symbol(:disabled-icon)operator(])  ident(opts)operator(\))
       error(~)error(@)operator(()ident(auto-setters) ident(JLabel) operator([)symbol(:for)operator(]) ident(opts)operator(\))operator(\))operator(\))operator(\))
operator(()reserved(ns) ident(clj-swing.list)
  operator(()symbol(:use) operator([)ident(clj-swing) ident(core) ident(panel)operator(])
	operator([)ident(clojure.contrib.swing-utils) symbol(:only) operator([)ident(do-swing)operator(])operator(])operator(\))

  operator(()symbol(:import) operator(()ident(javax.swing) ident(JList) ident(ListModel)operator(\))
	   operator(()ident(javax.swing.event) ident(ListDataEvent) ident(ListDataListener) ident(ListSelectionListener)operator(\))operator(\))operator(\))

operator(()reserved(def) ident(*list-known-keys*) operator([)symbol(:action) symbol(:on-selection-change)operator(])operator(\))


operator(()reserved(defmacro) ident(add-list-selection-listener) operator([)ident(obj) operator([)operator([)ident(event)operator(]) ident(&) ident(code)operator(])operator(])
  error(`)operator(()reserved(doto) error(~)ident(obj)
     operator(()reserved(.)ident(addListSelectionListener)
      operator(()reserved(proxy) operator([)ident(ListSelectionListener)operator(]) operator([)operator(])
	operator(()ident(valueChanged) operator([)error(~)ident(event)operator(])
			 error(~)ident(@code)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defmacro) ident(list-model) operator([)ident(&) operator({)operator([)operator([)operator(]) ident(&) ident(size-code)operator(]) symbol(:size)
			 operator([)operator([)ident(get-idx)operator(]) ident(&) ident(get-code)operator(]) symbol(:get)
			 operator([)operator([)ident(a-l-l)operator(]) ident(&) ident(add-listener-code)operator(]) symbol(:add-listener)
			 operator([)operator([)ident(r-l-l)operator(]) ident(&) ident(remove-listener-code)operator(]) symbol(:remove-listener)operator(})operator(])
  error(`)operator(()reserved(proxy) operator([)ident(ListModel)operator(]) operator([)operator(])
     operator(()ident(getSize) operator([)operator(])
	      error(~)ident(@size-code)operator(\))
     operator(()ident(getElementAt) operator([)error(~)ident(get-idx)operator(])
		   error(~)ident(@get-code)operator(\))
     operator(()ident(addListDataListener) operator([)error(~)ident(a-l-l)operator(])
			  error(~)ident(@add-listener-code)operator(\))
     operator(()ident(removeListDataListener) operator([)error(~)ident(r-l-l)operator(])
			     error(~)ident(@remove-listener-code)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(seq-ref-list-model) operator([)ident(seq-ref)operator(])
  operator(()reserved(let) operator([)ident(listeners) operator(()reserved(atom) error(#)operator({)operator(})operator(\))
	reserved(key) operator(()reserved(gensym) string<delimiter(")content(seq-ref-list-model-watch)delimiter(")>operator(\))
	ident(m) operator(()ident(list-model)
	   symbol(:size) operator(()operator([)operator(]) operator(()reserved(count) ident(@seq-ref)operator(\))operator(\))
	   symbol(:add-listener) operator(()operator([)ident(l)operator(]) operator(()reserved(swap!) ident(listeners) reserved(conj) ident(l)operator(\))operator(\))
	   symbol(:remove-listener) operator(()operator([)ident(l)operator(]) operator(()reserved(swap!) ident(listeners) reserved(disj) ident(l)operator(\))operator(\))
	   symbol(:get) operator(()operator([)ident(i)operator(]) operator(()reserved(if) operator(()ident(has-index?) ident(@seq-ref) ident(i)operator(\)) operator(()reserved(nth) ident(@seq-ref) ident(i)operator(\)) ident(nil)operator(\))operator(\))
	   operator(\))operator(])
    operator(()reserved(add-watch) ident(seq-ref) reserved(key) 
	       operator(()reserved(fn) operator([)ident(_) ident(_) ident(_) ident(state)operator(])
		 operator(()ident(do-swing)
		  operator(()reserved(let) operator([)ident(m) operator(()ident(ListDataEvent.) ident(m) operator(()ident(ListDataEvent/CONTENTS_CHANGED)operator(\)) integer(0) operator(()reserved(count) ident(state)operator(\))operator(\))operator(])
		    operator(()reserved(doseq) operator([)ident(l) ident(@listeners)operator(])
		      operator(()reserved(.)ident(contentsChanged) ident(l) ident(m)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
    ident(m)operator(\))operator(\))

operator(()reserved(defmacro) ident(jlist) operator([)ident(&) operator({)ident(action) symbol(:action) ident(on-selection-change) symbol(:on-selection-change) ident(items) symbol(:items) ident(scrolling) symbol(:scrolling) symbol(:as) ident(opts)operator(})operator(])
  operator(()reserved(let) operator([)ident(l) operator(()reserved(gensym) string<delimiter(")content(jlist)delimiter(")>operator(\))operator(])
  error(`)operator(()reserved(let) operator([)error(~)ident(l) operator(()reserved(doto) operator(()ident(JList.)operator(\))
	      error(~)error(@)operator(()reserved(if) ident(action)  
		  operator([)error(`)operator(()ident(add-action-listener) error(~)ident(action)operator(\))operator(])operator(\))
	      error(~)error(@)operator(()reserved(if) ident(on-selection-change)  
		  operator([)error(`)operator(()ident(add-list-selection-listener) error(~)ident(on-selection-change)operator(\))operator(])operator(\))    
	      error(~)error(@)operator(()ident(auto-setters) ident(JList) ident(*list-known-keys*) ident(opts)operator(\))
	      error(~)error(@)operator(()reserved(map) operator(#()reserved(list) operator(')reserved(.)ident(addItem) ident(%)operator(\)) ident(items)operator(\))operator(\))operator(])
     
     error(~)error(@)operator(()reserved(if) ident(scrolling) 
	error(`)operator([)operator(()ident(scroll-panel) error(~)ident(l)operator(\))operator(])
	error(`)operator([)error(~)ident(l)operator(])operator(\))operator(\))operator(\))operator(\))

comment(;; TODO Add list cell renderer proxy stuff(ns clj-swing.panel)
  operator(()symbol(:use) operator([)ident(clj-swing.core) symbol(:only) operator([)ident(group-container-args) ident(auto-setters) ident(icon-setters)operator(])operator(])operator(\))

  operator(()symbol(:import) operator(()ident(javax.swing) ident(JPanel) ident(JSplitPane) ident(JScrollPane)operator(\))
	   operator(()ident(java.awt) ident(Dimension)operator(\))operator(\))
  operator(()symbol(:require) operator([)ident(clojure.contrib.java-utils) symbol(:as) ident(java)operator(])operator(\))operator(\))


operator(()reserved(def) ident(*panel-known-keys*)
     operator([)symbol(:name) symbol(:icon) symbol(:title) symbol(:layout) symbol(:constrains) symbol(:size) symbol(:bounds) symbol(:location) symbol(:pack) symbol(:preferred-size) symbol(:paint)operator(])operator(\))


operator(()reserved(defmacro) ident(general-panel) operator([)ident(cl) ident(args)operator(])
  string<delimiter(")content(options are:
:name - internal name of the frame.
:layout - layout manager.
:constrains - constrains object for the layout manager.
:on-close - one of :do-nothing, :exit, :hide, :dispose, 
  sets the default on close action for the frame.
:preferred-size - [w, h]
:bounds - [x, y, w, h]
:location - [x y]
:paint - paint function
:pack - shall the frame autopack at the end?
:show - shall the frame autoshow at the end?
)delimiter(")>
    operator(()reserved(let) operator([)ident(default-opts) operator({)operator(})
	  operator({)ident(forms) symbol(:forms) operator({)operator([)operator([)ident(paint-obj)operator(]) ident(&) ident(paint-code)operator(]) symbol(:paint) symbol(:as) ident(opts)operator(}) symbol(:options) ident(bindings) symbol(:bindings)operator(}) operator(()ident(group-container-args) ident(args)operator(\))
	  ident(opts) operator(()reserved(merge) ident(default-opts) ident(opts)operator(\))
	  ident(panel) operator(()reserved(or) operator(()symbol(:name) ident(opts)operator(\)) operator(()reserved(gensym) string<delimiter(")content(panel)delimiter(")>operator(\))operator(\))
	  ident(constrains) operator(()reserved(gensym) string<delimiter(")content(constrains)delimiter(")>operator(\))
	  ident(manager) operator(()reserved(gensym) string<delimiter(")content(manager)delimiter(")>operator(\))operator(])
      error(`)operator(()reserved(let) operator([)error(~)ident(panel)  error(~)operator(()reserved(if) operator(()symbol(:paint) ident(opts)operator(\))
			error(`)operator(()reserved(proxy) operator([)error(~)ident(cl)operator(]) operator([)operator(])
			  operator(()ident(paintComponent) operator([)error(~)ident(paint-obj)operator(]) 
					  error(~)ident(@paint-code)operator(\))operator(\))
			error(`)operator(()reserved(new) error(~)ident(cl)operator(\))operator(\))
	     error(~)error(@)operator(()reserved(if) operator(()symbol(:layout) ident(opts)operator(\))
		 operator([)operator(')ident(_) error(`)operator(()reserved(.)ident(setLayout) error(~)ident(panel) error(~)operator(()symbol(:layout) ident(opts)operator(\))operator(\))operator(])operator(\))
	     error(~)error(@)operator(()reserved(if) operator(()symbol(:constrains) ident(opts)operator(\))
		 error(`)operator(()error(~)ident(constrains) error(~)operator(()symbol(:constrains) ident(opts)operator(\))operator(\))operator(\))
	     error(~)error(@)operator(()reserved(if) operator(()symbol(:constrains) ident(opts)operator(\))
		 operator(()reserved(reverse) 
		  operator(()reserved(reduce)
		   operator(()reserved(fn) operator([)ident(l) operator([)ident(f) ident(s)operator(])operator(])
		     operator(()reserved(if) operator(()reserved(keyword?) ident(f)operator(\))
		       operator(()reserved(conj) operator(()reserved(conj) ident(l) operator(')ident(_)operator(\)) error(`)operator(()ident(set-constraint!) error(~)ident(constrains) error(~)ident(f) error(~)ident(s)operator(\))operator(\))
		       operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) ident(l) ident(f)operator(\)) ident(s)operator(\)) operator(')ident(_)operator(\)) error(`)operator(()reserved(.)ident(add) error(~)ident(panel) error(~)ident(f) error(~)ident(constrains)operator(\))operator(\))operator(\))operator(\))
		   operator(')operator(()operator(\)) operator(()reserved(partition) integer(2) ident(bindings)operator(\))operator(\))operator(\))
		 operator(()reserved(reverse) 
		  operator(()reserved(reduce)
		   operator(()reserved(fn) operator([)ident(l) operator([)ident(f) ident(s)operator(])operator(])
		     operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) operator(()reserved(conj) ident(l) ident(f)operator(\)) ident(s)operator(\)) operator(')ident(_)operator(\)) error(`)operator(()reserved(.)ident(add) error(~)ident(panel) error(~)ident(f)operator(\))operator(\))operator(\))
		   operator(')operator(()operator(\)) operator(()reserved(partition) integer(2) ident(bindings)operator(\))operator(\))operator(\))operator(\))operator(])
	 operator(()reserved(doto) error(~)ident(panel)
	   error(~)error(@)operator(()ident(icon-setters) operator([)symbol(:icon)operator(])  ident(opts)operator(\))
	   error(~)error(@)operator(()ident(auto-setters) ident(cl) ident(*panel-known-keys*) ident(opts)operator(\))
	   error(~)error(@)operator(()reserved(when-let) operator([)operator([)ident(w) ident(h)operator(]) operator(()symbol(:preferred-size) ident(opts)operator(\))operator(])
	      operator([)error(`)operator(()reserved(.)ident(setPreferredSize) operator(()ident(Dimension.) error(~)ident(w) error(~)ident(h)operator(\))operator(\))operator(])operator(\))
	   error(~)error(@)operator(()reserved(when-let) operator([)operator([)ident(x) ident(y) ident(w) ident(h)operator(]) operator(()symbol(:bounds) ident(opts)operator(\))operator(])
	      operator([)error(`)operator(()reserved(.)ident(setBounds) error(~)ident(x) error(~)ident(y) error(~)ident(w) error(~)ident(h)operator(\))operator(])operator(\))
	   error(~)error(@)operator(()reserved(when-let) operator([)operator([)ident(x) ident(y)operator(]) operator(()symbol(:location) ident(opts)operator(\))operator(])
	      operator([)error(`)operator(()reserved(.)ident(setLocation) error(~)ident(x) error(~)ident(y)operator(\))operator(])operator(\))
	   error(~)ident(@forms)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defmacro) ident(panel) operator([)ident(&) ident(args)operator(])
  error(`)operator(()ident(general-panel) ident(JPanel) error(~)ident(args)operator(\))operator(\))

operator(()reserved(defmacro) ident(scroll-panel) operator([)ident(obj) ident(&) operator({) symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()reserved(doto) operator(()reserved(new) ident(JScrollPane) error(~)ident(obj)operator(\))
     error(~)error(@)operator(()ident(auto-setters) ident(JScrollPane) operator([)symbol(:preferred-size)operator(]) ident(opts)operator(\))
     error(~)error(@)operator(()reserved(when-let) operator([)operator([)ident(w) ident(h)operator(]) operator(()symbol(:preferred-size) ident(opts)operator(\))operator(])
	 operator([)error(`)operator(()reserved(.)ident(setPreferredSize) operator(()ident(Dimension.) error(~)ident(w) error(~)ident(h)operator(\))operator(\))operator(])operator(\))operator(\))operator(\))


operator(()reserved(ns) ident(clj-swing.text-field)
  operator(()symbol(:use) operator([)ident(clj-swing) ident(core) ident(document)operator(])operator(\))
  operator(()symbol(:import) operator(()ident(javax.swing) ident(JTextField) ident(ListModel)operator(\))
	   operator(()ident(javax.swing.event) ident(ListDataEvent) ident(ListDataListener) ident(ListSelectionListener)operator(\))operator(\))operator(\))

operator(()reserved(def) ident(*text-field-known-keys*) operator([)symbol(:action) symbol(:str-ref)operator(])operator(\))

operator(()reserved(defmacro) ident(text-field) operator([)ident(&) operator({)ident(action) symbol(:action) ident(str-ref) symbol(:str-ref) symbol(:as) ident(opts)operator(})operator(])
  error(`)operator(()reserved(doto) operator(()ident(JTextField.)operator(\))
     error(~)error(@)operator(()reserved(if) ident(action)  
	 operator([)error(`)operator(()ident(add-action-listener) error(~)ident(action)operator(\))operator(])operator(\))
     error(~)error(@)operator(()reserved(if) ident(str-ref)  
	 operator([)error(`)operator(()ident(add-str-ref-doc-listener) error(~)ident(str-ref)operator(\))operator(])operator(\))
     error(~)error(@)operator(()ident(auto-setters) ident(JTextField) ident(*text-field-known-keys*) ident(opts)operator(\))operator(\))operator(\))


