operator(()ident(defproject) ident(EPIC) string<delimiter(")content(1.0.0-SNAPSHOT)delimiter(")> 
	symbol(:description) string<delimiter(")content(FIXME: write)delimiter(")> 
	symbol(:dependencies) operator([)operator([)ident(org.clojure/clojure) string<delimiter(")content(1.1.0)delimiter(")>operator(]) 
	operator([)ident(clj-sandbox/clj-sandbox) string<delimiter(")content(0.2.9-SNAPSHOT)delimiter(")>operator(]) 
	operator([)ident(org.clojure/clojure-contrib) string<delimiter(")content(1.1.0)delimiter(")>operator(])operator(]) 
	symbol(:dev-dependencies) operator([)
	operator([)ident(swank-clojure/swank-clojure) string<delimiter(")content(1.1.0)delimiter(")>operator(])operator(])
	symbol(:main) ident(net.licenser.epic)operator(\)) 
operator(()reserved(ns) ident(net.licenser.epic.game.basic)
  operator(()symbol(:use) ident(net.licenser.epic.utils)operator(\))
  operator(()symbol(:require) operator([)ident(net.licenser.epic.units) symbol(:as) ident(units)operator(])operator(\))operator(\))

operator(()reserved(defn) ident(unit-at)
  operator([)ident(game) ident(x) ident(y)operator(])
  operator(()reserved(deref) operator(()ident(get-field) operator(()symbol(:map) ident(game)operator(\)) ident(x) ident(y)operator(\))operator(\))operator(\))
	   

operator(()reserved(defn) ident(move-unit*)
  operator([)ident(game) ident(unit) ident(x) ident(y)operator(])
  operator(()reserved(if) operator(()reserved(and)
       operator(()reserved(integer?) ident(x)operator(\))
       operator(()reserved(integer?) ident(y)operator(\))operator(\))
    operator(()reserved(dosync)
     operator(()reserved(let) operator([)ident(u-x) operator(()symbol(:x) operator(@)ident(unit)operator(\))
	   ident(u-y) operator(()symbol(:y) operator(@)ident(unit)operator(\))
	   ident(id) operator(()symbol(:id) operator(@)ident(unit)operator(\))
	   reserved(map) operator(()symbol(:map) ident(game)operator(\))
	   ident(f-u) operator(()ident(get-field) reserved(map) ident(u-x) ident(u-y)operator(\))
	   ident(f-d) operator(()ident(get-field) reserved(map) ident(x) ident(y)operator(\))operator(])
       operator(()reserved(if) operator(()reserved(empty?) operator(@)ident(f-d)operator(\))
	 operator(()reserved(do) 
	   operator(()ident(combat-log) symbol(:move)
		       operator({)symbol(:unit) ident(id)
			symbol(:position) operator({)symbol(:x) ident(x) symbol(:y) ident(y)operator(})operator(})operator(\))
	   operator(()ident(trace) string<delimiter(")content(game.basic.move-unit*)delimiter(")> string<delimiter(")content(Moving)delimiter(")> ident(id) string<delimiter(")content(to)delimiter(")> ident(x) string<delimiter(")content(/)delimiter(")> ident(y)operator(\))
	   operator(()reserved(alter) ident(unit) reserved(assoc) symbol(:x) ident(x) symbol(:y) ident(y)operator(\))
	   operator(()reserved(alter) ident(f-u)  operator(#()reserved(doall) operator(()reserved(remove) operator(()reserved(partial) reserved(=) ident(id)operator(\)) ident(%)operator(\))operator(\))operator(\))
	   operator(()reserved(alter) ident(f-d) reserved(conj) ident(id)operator(\))
	   ident(game)operator(\))
	 ident(game)operator(\))
       ident(game)operator(\))operator(\))operator(\))operator(\))operator(()reserved(ns) ident(net.licenser.epic.game.logic)
  operator(()symbol(:require) operator([)ident(net.licenser.epic.game.basic) symbol(:as) ident(basic)operator(])operator(\))
  operator(()symbol(:use) ident(clojure.stacktrace)operator(\))
  operator(()symbol(:use) ident(clojure.contrib.str-utils)operator(\))
  operator(()symbol(:require) operator(()ident(net.licenser.epic) operator([)ident(modules) symbol(:as) ident(modules)operator(]) operator([)ident(units) symbol(:as) ident(units)operator(]) operator([)ident(utils) symbol(:as) ident(utils)operator(])operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(directions)
  operator(()operator([)ident(start) ident(i) ident(d)operator(]) 
     operator(()reserved(lazy-seq) 
      operator(()reserved(cons) 
       operator(()reserved(mod) operator(()reserved(+) ident(start) operator(()reserved(*) ident(d) ident(i)operator(\))operator(\)) integer(6)operator(\)) 
       operator(()reserved(cons) 
	operator(()reserved(mod) operator(()reserved(-) ident(start) operator(()reserved(*) ident(d) ident(i)operator(\))operator(\)) integer(6)operator(\)) 
	operator(()ident(directions) ident(start) operator(()reserved(inc) ident(i)operator(\)) ident(d)operator(\))operator(\))operator(\))operator(\))operator(\)) 
  operator(()operator([)ident(start) ident(d)operator(]) 
     operator(()reserved(take) integer(6) operator(()reserved(cons) operator(()reserved(mod) ident(start) integer(6)operator(\)) operator(()ident(directions) ident(start) integer(1) ident(d)operator(\))operator(\))operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(register-target)
  operator([)ident(unit) ident(target)operator(])
  operator(()reserved(dosync) operator(()reserved(alter) ident(unit) reserved(assoc) symbol(:last-targe) ident(target)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(intercept-unit)
  operator(()operator([)ident(game) ident(unit) ident(target) ident(distance) ident(visited)operator(])
     operator(()ident(utils/trace) string<delimiter(")content(logic.intercept-unit)delimiter(")> string<delimiter(")content(start)delimiter(")>operator(\))
     operator(()reserved(dosync)
      operator(()reserved(loop) operator([)ident(game) ident(game) ident(unit) ident(unit) ident(target) ident(target) ident(distance) ident(distance) ident(visited) ident(visited)operator(])
	operator(()reserved(let) operator([)ident(u-id) operator(()symbol(:id) operator(@)ident(unit)operator(\))
	      ident(t-id) operator(()symbol(:id) operator(@)ident(target)operator(\))
	      ident(d) operator(()ident(utils/map-distance) operator(@)ident(unit) operator(@)ident(target)operator(\))
	      ident(visited) operator(()reserved(conj) ident(visited) operator([)operator(()symbol(:x) operator(@)ident(unit)operator(\)) operator(()symbol(:y) operator(@)ident(unit)operator(\))operator(])operator(\))operator(])
	  operator(()reserved(if) operator(()reserved(or)
	       operator(()reserved(zero?) operator(()ident(units/unit-range) operator(@)ident(unit)operator(\))operator(\))
	       operator(()reserved(=) ident(distance) ident(d)operator(\))
	       operator(()reserved(not) operator(()ident(utils/use-energy) ident(unit) operator(()ident(utils/module-spec) operator(()ident(units/main-engine) operator(@)ident(unit)operator(\)) symbol(:energy-usage)operator(\))operator(\))operator(\))operator(\))
	    operator(()reserved(do)
	      operator(()reserved(if) operator(()reserved(zero?) operator(()ident(units/unit-range) operator(@)ident(unit)operator(\))operator(\))
		operator(()ident(utils/trace) string<delimiter(")content(logic.intercept)delimiter(")> string<delimiter(")content(out of gass:)delimiter(")> operator(()ident(units/main-engine) operator(@)ident(unit)operator(\))operator(\))
		operator(()ident(utils/trace) string<delimiter(")content(logic.intercept)delimiter(")> string<delimiter(")content(destinateion reached:)delimiter(")> ident(d) string<delimiter(")content(of)delimiter(")> ident(distance)operator(\))operator(\))
	      ident(game)operator(\))
	    operator(()reserved(let) operator([)ident(best-direction) operator(()reserved(if) operator(()reserved(or) pre_constant(true) operator(()reserved(>) ident(d) ident(distance)operator(\))operator(\))
				   operator(()ident(utils/friction-direction-to) operator(@)ident(unit) operator(@)ident(target)operator(\))
				   operator(()reserved(mod) operator(()reserved(+) operator(()ident(utils/friction-direction-to) operator(@)ident(unit) operator(@)ident(target)operator(\)) integer(3)operator(\)) integer(6)operator(\))operator(\))
		  ident(rounded-direction) operator(()reserved(int) operator(()ident(Math/round) type(#^Double) ident(best-direction)operator(\))operator(\))
		  ident(rounded-direction) operator(()reserved(if) operator(()reserved(<) ident(distance) ident(d)operator(\)) ident(rounded-direction) operator(()reserved(+) ident(rounded-direction) integer(3)operator(\))operator(\))
		  ident(delta) operator(()reserved(if) operator(()reserved(<) ident(best-direction) ident(rounded-direction)operator(\)) integer(1) ident(-1)operator(\))
		  ident(dirs) operator(()ident(directions) ident(rounded-direction) ident(delta)operator(\))
		  ident(_) operator(()ident(utils/trace) string<delimiter(")content(logic.intercept)delimiter(")> string<delimiter(")content(possible directions:)delimiter(")> ident(dirs)operator(\))
		  ident(positions) operator(()reserved(filter) operator(()reserved(fn) operator([)ident(p)operator(]) 
				      operator(()reserved(and) operator(()reserved(every?) operator(()reserved(partial) reserved(not)reserved(=) ident(p)operator(\)) ident(visited)operator(\)) operator(()reserved(empty?) operator(()ident(basic/unit-at) ident(game) operator(()reserved(first) ident(p)operator(\))  operator(()reserved(second) ident(p)operator(\))operator(\))operator(\))operator(\))operator(\))
				    operator(()reserved(map) operator(()reserved(partial) ident(utils/in-direction) operator(()symbol(:x) operator(@)ident(unit)operator(\)) operator(()symbol(:y) operator(@)ident(unit)operator(\))operator(\)) ident(dirs)operator(\))operator(\))
		  ident(_) operator(()ident(utils/trace) string<delimiter(")content(logic.intercept)delimiter(")> string<delimiter(")content(possible new and empty positions:)delimiter(")> ident(positions)operator(\))
		  operator([)ident(x) ident(y)operator(]) operator(()reserved(first) ident(positions)operator(\))operator(])
	      operator(()ident(utils/trace) string<delimiter(")content(logic.intercept)delimiter(")> string<delimiter(")content(moving from)delimiter(")> operator(()symbol(:x) operator(@)ident(unit)operator(\)) operator(()symbol(:y) operator(@)ident(unit)operator(\)) string<delimiter(")content(to)delimiter(")> ident(x) ident(y)operator(\))
	      operator(()reserved(let) operator([)ident(g) operator(()ident(basic/move-unit*) ident(game) ident(unit) ident(x) ident(y)operator(\))
		    ident(e) operator(()ident(units/main-engine) operator(@)ident(unit)operator(\))
		    ident(g) operator(()ident(utils/update-module-specs) ident(unit) operator(()symbol(:id) ident(e)operator(\)) symbol(:times-used) reserved(inc)operator(\))operator(])
		operator(()reserved(recur) ident(game) ident(unit) ident(target) ident(distance) ident(visited)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
     operator(()operator([)ident(game) ident(unit) ident(target) ident(distance)operator(])
	operator(()ident(intercept-unit) ident(game) ident(unit) ident(target) ident(distance) operator(')operator(()operator(\))operator(\))operator(\))operator(\))


 operator(()reserved(defn) ident(find-units)
   operator([)ident(game) ident(pred)operator(])
   operator(()reserved(let) operator([)ident(units) operator(()reserved(vals) operator(()symbol(:units) ident(game)operator(\))operator(\))
	 ident(units) operator(()reserved(filter) operator(()reserved(fn) operator([)ident(u)operator(])
			  operator(()ident(utils/trace) string<delimiter(")content(find-units)delimiter(")> string<delimiter(")content(testing unit:)delimiter(")> operator(()symbol(:id) operator(@)ident(u)operator(\))operator(\))
			  operator(()reserved(if) operator(()reserved(and) ident(utils/*trace*) operator(()ident(pred) operator(@)ident(u)operator(\))operator(\))
			    operator(()ident(utils/trace) string<delimiter(")content(find-units)delimiter(")> string<delimiter(")content(testing unit:)delimiter(")> operator(()symbol(:id) operator(@)ident(u)operator(\)) string<delimiter(")content(positive!)delimiter(")>operator(\))
			    operator(()ident(utils/trace) string<delimiter(")content(find-units)delimiter(")> string<delimiter(")content(testing unit:)delimiter(")> operator(()symbol(:id) operator(@)ident(u)operator(\)) string<delimiter(")content(negativ!)delimiter(")>operator(\))operator(\))
			  operator(()ident(pred) operator(@)ident(u)operator(\))operator(\)) ident(units)operator(\))
	 ident(units) operator(()reserved(if) ident(utils/*trace*) operator(()reserved(doall) ident(units)operator(\)) ident(units)operator(\))operator(])
   ident(units)operator(\))operator(\))

 operator(()reserved(defn) ident(find-hostile-units)
   operator(()operator([)ident(game) ident(unit)operator(])
       operator(()reserved(let) operator([)ident(t) operator(()reserved(int) operator(()symbol(:team) operator(@)ident(unit)operator(\))operator(\))operator(])
	 operator(()ident(utils/trace) string<delimiter(")content(find-hostile-units)delimiter(")> string<delimiter(")content(Looking for units in team:)delimiter(")> ident(t)operator(\))
	 operator(()ident(find-units) ident(game) operator(#()reserved(and)
			    operator(()reserved(not) operator(()symbol(:destroyed) ident(%)operator(\))operator(\))
			    operator(()reserved(not)reserved(=) ident(t) operator(()reserved(int) operator(()symbol(:team)  ident(%)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
   operator(()operator([)ident(game) ident(unit) reserved(range)operator(])
      operator(()reserved(let) operator([)ident(t) operator(()symbol(:team) operator(@)ident(unit)operator(\))operator(])
	 operator(()ident(utils/trace) string<delimiter(")content(find-hostile-units)delimiter(")> string<delimiter(")content(Looking for units in team:)delimiter(")> ident(t) string<delimiter(")content(in range)delimiter(")> reserved(range)operator(\))
	 operator(()ident(find-units)
	  ident(game)
	  operator(#()reserved(and)
	    operator(()reserved(not) operator(()symbol(:destroyed) ident(%)operator(\))operator(\))
	    operator(()reserved(not)reserved(=) ident(t) operator(()symbol(:team) ident(%)operator(\))operator(\))
	    operator(()reserved(>)reserved(=) reserved(range) operator(()ident(utils/map-distance) operator(@)ident(unit)  ident(%)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))


 operator(()reserved(defn) ident(can-fire-at?) operator([)ident(unit) ident(weapon) ident(target)operator(])
   operator(()reserved(dosync)
    operator(()reserved(let) operator([)ident(spec) operator(()ident(utils/module-spec) ident(weapon)operator(\))
	  ident(dist) operator(()ident(utils/map-distance) ident(target) ident(unit)operator(\))operator(])
      operator(()reserved(and)
       operator(()reserved(not) operator(()ident(modules/module-destroyed?) ident(weapon)operator(\))operator(\))
       operator(()reserved(not) operator(()ident(units/unit-destroyed?) ident(target)operator(\))operator(\))
       operator(()reserved(<)reserved(=) operator(()reserved(-) operator(()symbol(:range) ident(spec)operator(\)) operator(()symbol(:variation) ident(spec)operator(\))operator(\)) ident(dist) operator(()reserved(+) operator(()symbol(:range) ident(spec)operator(\)) operator(()symbol(:variation) ident(spec)operator(\))operator(\))operator(\))
       operator(()reserved(<)reserved(=) operator(()symbol(:times-used) ident(spec)operator(\)) operator(()symbol(:max-usage) ident(spec)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(fire-weapon) operator([)ident(game) ident(unit) ident(weapon-id) ident(target)operator(])
  operator(()reserved(dosync)
   operator(()reserved(let) operator([)ident(w) operator(()ident(utils/get-module) operator(@)ident(unit) ident(weapon-id)operator(\))operator(])
     operator(()ident(utils/trace) string<delimiter(")content(game.logic.fire-weapon)delimiter(")> string<delimiter(")content(u:)delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\)) string<delimiter(")content(t:)delimiter(")> operator(()symbol(:id) operator(@)ident(target)operator(\))  string<delimiter(")content(w:)delimiter(")> ident(weapon-id)operator(\))
     operator(()reserved(if) operator(()reserved(and)
	  operator(()ident(can-fire-at?) operator(@)ident(unit) ident(w) operator(@)ident(target)operator(\))
	  operator(()ident(utils/use-energy) ident(unit) operator(()ident(utils/module-spec) ident(w) symbol(:energy-usage)operator(\))operator(\))operator(\))
       operator(()reserved(do)
	 operator(()ident(utils/trace) string<delimiter(")content(game.logic.fire-weapon)delimiter(")> string<delimiter(")content(Can Fire: attacker:)delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\)) string<delimiter(")content(| target:)delimiter(")> operator(()symbol(:id) operator(@)ident(target)operator(\))operator(\))
	 operator(()reserved(if) operator(()operator(()ident(utils/module-spec) ident(w) symbol(:unit-hit-fn)operator(\)) ident(unit) ident(w) ident(target)operator(\))
	   operator(()ident(units/hit-unit) ident(game) ident(target) ident(unit) operator(()ident(utils/module-spec) ident(w) symbol(:damage)operator(\))operator(\))
	   ident(game)operator(\))operator(\))
       operator(()reserved(do)
	 operator(()ident(utils/trace) string<delimiter(")content(game.logic.fire-weapon)delimiter(")> string<delimiter(")content(Can't-Fire attacker:)delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\)) string<delimiter(")content(| target:)delimiter(")> operator(()symbol(:id) operator(@)ident(target)operator(\))operator(\))
	 ident(game)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(emply-point-defense)
  operator([)ident(game) ident(unit)operator(])
  operator(()reserved(let) operator([)ident(pd-s) operator(()reserved(filter) operator(#()reserved(re-find) regexp<delimiter(#")content(Point Defense)delimiter(")> operator(()symbol(:name) ident(%)operator(\))operator(\)) operator(()ident(utils/get-modules) operator(@)ident(unit) symbol(:weapon)operator(\))operator(\))operator(])
    operator(()reserved(if) operator(()reserved(not) operator(()reserved(empty?) ident(pd-s)operator(\))operator(\))
      operator(()reserved(let) operator([)ident(r) operator(()reserved(reduce) operator(#()reserved(max) ident(%1) ident(%2)operator(\)) operator(()reserved(map) operator(#()reserved(+) operator(()ident(utils/module-spec) ident(%) symbol(:range)operator(\)) operator(()ident(utils/module-spec) ident(%) symbol(:variation)operator(\))operator(\)) ident(pd-s)operator(\))operator(\))
	    ident(ts) operator(()ident(find-hostile-units) ident(game) ident(unit) ident(r)operator(\))operator(])
	operator(()reserved(doall) operator(()reserved(map) operator(()reserved(fn) operator([)ident(w)operator(])
		      operator(()reserved(doall) operator(()reserved(map) operator(()reserved(fn) operator([)ident(t)operator(]) operator(()ident(fire-weapon) ident(game) ident(unit) operator(()symbol(:id) ident(w)operator(\)) ident(t)operator(\))operator(\)) ident(ts)operator(\))operator(\))operator(\)) ident(pd-s)operator(\))operator(\))operator(\))operator(\))operator(\))
    ident(game)operator(\))

operator(()reserved(defn) ident(fire-all) operator([)ident(game) ident(unit) ident(target)operator(])
  operator(()reserved(let) operator([)ident(modules) operator(()reserved(map) operator(#()symbol(:id) ident(%)operator(\)) operator(()ident(utils/get-modules) operator(@)ident(unit) symbol(:weapon)operator(\))operator(\))operator(])
   operator(()ident(utils/trace) string<delimiter(")content(fire-all)delimiter(")> string<delimiter(")content(modules:)delimiter(")> ident(modules) string<delimiter(")content(of)delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\)) string<delimiter(")content(at)delimiter(")> operator(()symbol(:id) operator(@)ident(target)operator(\))operator(\))
   operator(()reserved(reduce)
    operator(()reserved(fn) operator([)ident(game) ident(weapon-id)operator(]) operator(()ident(utils/trace) string<delimiter(")content(fire-all)delimiter(")> string<delimiter(")content(fiering:)delimiter(")> ident(weapon-id)operator(\)) operator(()ident(fire-weapon) ident(game) ident(unit) ident(weapon-id) ident(target)operator(\)) ident(game)operator(\))
    ident(game)
    ident(modules)operator(\))operator(\))operator(\))operator(()reserved(ns) ident(net.licenser.epic.game)
  operator(()symbol(:require) operator(()ident(net.licenser.epic) operator([)ident(units) symbol(:as) ident(units)operator(]) operator([)ident(utils) symbol(:as) ident(utils)operator(])operator(\))operator(\))
  operator(()symbol(:use) ident(clojure.stacktrace)operator(\))
  operator(()symbol(:use) operator(()ident(net.licenser.epic.game) operator([)ident(basic)operator(])operator(\))operator(\))operator(\))

operator(()reserved(defstruct) ident(game) symbol(:map) symbol(:units)operator(\))

operator(()reserved(defn) ident(add-unit)
  operator([)ident(game) ident(unit)operator(])
  operator(()reserved(update-in) ident(game) operator([)symbol(:units) operator(()symbol(:id) ident(unit)operator(\))operator(]) operator(()ident(utils/static) operator(()reserved(ref) ident(unit)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(create-game)
  operator(()operator([)operator(])
     operator(()reserved(struct) ident(game) operator(()reserved(ref) operator({)operator(})operator(\)) operator({)operator(})operator(\))operator(\))
  operator(()operator([)ident(map-size)operator(])
     operator(()reserved(let) operator([)ident(g) operator(()ident(create-game)operator(\))
	   ident(s) operator(()reserved(*) ident(-1) ident(map-size)operator(\))
	   ident(e) operator(()reserved(inc) ident(map-size)operator(\))operator(])
       operator(()reserved(dorun)
	operator(()reserved(map) operator(()reserved(fn) operator([)ident(x)operator(]) operator(()reserved(map) operator(()reserved(fn) operator([)ident(y)operator(]) operator(()ident(utils/get-field) operator(()symbol(:map) ident(g)operator(\)) ident(x) ident(y)operator(\))operator(\)) operator(()reserved(range) ident(s) ident(e)operator(\))operator(\))operator(\)) operator(()reserved(range) ident(s) ident(e)operator(\))operator(\))operator(\))
       ident(g)operator(\))operator(\))operator(\))

operator(()reserved(defn-) ident(cycle-reduce-fn)
  operator([)ident(game) ident(unit-id)operator(])
  operator(()ident(units/cycle-unit) ident(game) ident(unit-id)operator(\))operator(\))

operator(()reserved(defn-) ident(cycle-unit-fn)
  operator([)ident(game) ident(unit-id)operator(])
  operator(()ident(utils/trace) string<delimiter(")content(cycle-unit-fn)delimiter(")> string<delimiter(")content(cyceling unit)delimiter(")> ident(unit-id)operator(\))
  operator(()ident(units/cycle-unit) ident(game) operator(()ident(utils/get-unit) ident(game) ident(unit-id)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(cycle-game*)
  operator(()operator([)ident(game)operator(])
     operator(()reserved(dorun)
      operator(()reserved(map) operator(()reserved(partial) ident(cycle-unit-fn) ident(game)operator(\)) operator(()reserved(keys) operator(()symbol(:units) ident(game)operator(\))operator(\))operator(\))operator(\))operator(\))
  operator(()operator([)ident(game) ident(partition-size)operator(])
     operator(()reserved(try)
      operator(()reserved(dorun) operator(()reserved(pmap)
	      operator(()reserved(bound-fn) operator([)ident(batch)operator(]) operator(()reserved(doall) operator(()reserved(map) operator(()reserved(fn) operator([)ident(unit)operator(]) operator(()ident(cycle-unit-fn) ident(game) ident(unit)operator(\))operator(\)) ident(batch)operator(\))operator(\))operator(\))
	      operator(()reserved(partition) ident(partition-size) ident(partition-size) ident(nil) operator(()reserved(filter) operator(#()reserved(not) operator(()ident(units/unit-destroyed?) operator(@)operator(()ident(utils/get-unit) ident(game) ident(%)operator(\))operator(\))operator(\)) operator(()reserved(keys) operator(()symbol(:units) ident(game)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
      operator(()reserved(catch) ident(StackOverflowError) ident(e)
	operator(()reserved(println) string<delimiter(")content(In cycle-game*)delimiter(")>operator(\))
	operator(()ident(print-stack-trace) ident(e) integer(5)operator(\))operator(\))operator(\))operator(\))operator(\))
operator(()reserved(ns) ident(net.licenser.epic.modules.cycle)
  operator(()symbol(:require) operator([)ident(net.licenser.epic.utils) symbol(:as) ident(utils)operator(])operator(\))operator(\))

operator(()reserved(defn-) ident(apply-cycle-script)
  operator([)ident(game) ident(unit) ident(module-id)operator(])
  operator(()reserved(let) operator([)ident(s) operator(()symbol(:cycle-script) operator(()ident(utils/get-module) operator(@)ident(unit) ident(module-id)operator(\))operator(\))operator(])
    operator(()reserved(if) ident(s)
      operator(()ident(s) ident(game) ident(unit) ident(module-id)operator(\))
      ident(unit)operator(\))operator(\))operator(\))

comment(;(defn default-module-cycle)
comment(;  ([game unit module-id])
comment(;     (apply-cycle-script game unit module-id\)\))
comment(;  ([game unit module-id update-fn])
comment(;     (utils/update-module (apply-cycle-script game unit module-id\) module-id #(update-fn  %\)\)\)\))

operator(()reserved(defn) ident(default-module-cycle)
  operator(()operator([)ident(game) ident(unit) ident(module-id)operator(])
     ident(unit)operator(\))
  operator(()operator([)ident(game) ident(unit) ident(module-id) ident(update-fn)operator(])
     operator(()ident(utils/update-module) ident(unit) ident(module-id) operator(#()ident(update-fn)  ident(%)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(cycle-generic)
  operator([)ident(m)operator(])operator(\))

operator(()reserved(defmulti) ident(cycle-module)
  string<delimiter(")content(This method is called for every module at the start of the tick)delimiter(")>
  operator(()reserved(fn) operator([)ident(game) ident(unit) ident(module-id)operator(]) 
    operator(()reserved(let) operator([)reserved(type) operator(()symbol(:type) operator(()ident(utils/get-module) operator(@)ident(unit) ident(module-id)operator(\))operator(\))operator(])
    operator(()ident(utils/trace) string<delimiter(")content(modules.cycle)delimiter(")> string<delimiter(")content(Determining type: )delimiter(")> reserved(type)operator(\)) 
    reserved(type)operator(\))operator(\))operator(\))

operator(()reserved(defmethod) ident(cycle-module) symbol(:reactor)
  operator([)ident(game) ident(unit) ident(module-id)operator(])
  operator(()ident(default-module-cycle) ident(game) ident(unit) ident(module-id) 
    operator(()reserved(fn) operator([)ident(module)operator(])
      operator(()reserved(let) operator([)ident(specs) operator(()symbol(:specification) ident(module)operator(\))operator(])
	operator(()reserved(update-in)
	 ident(module) operator([)symbol(:specification) symbol(:energy)operator(]) operator(#()reserved(min) operator(()symbol(:capacity) ident(specs)operator(\)) operator(()reserved(+) ident(%) operator(()symbol(:output) ident(specs)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defmethod) ident(cycle-module) symbol(:engine)
  operator([)ident(game) ident(unit) ident(module-id)operator(])
  operator(()ident(default-module-cycle) ident(game) ident(unit) ident(module-id)
    operator(()reserved(fn) operator([)ident(module)operator(])
      operator(()reserved(let) operator([)ident(specs) operator(()symbol(:specification) ident(module)operator(\))operator(])
	operator(()reserved(update-in) ident(module) operator([)symbol(:specification) symbol(:times-used)operator(]) operator(()ident(utils/static) integer(0)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defmethod) ident(cycle-module) symbol(:weapon)
  operator([)ident(game) ident(unit) ident(module-id)operator(])
  operator(()ident(default-module-cycle) ident(game) ident(unit) ident(module-id)
    operator(()reserved(fn) operator([)ident(module)operator(])
      operator(()reserved(let) operator([)ident(specs) operator(()symbol(:specification) ident(module)operator(\))operator(])
	operator(()reserved(update-in) ident(module) operator([)symbol(:specification) symbol(:times-used)operator(]) operator(()ident(utils/static) integer(0)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))


operator(()reserved(defmethod) ident(cycle-module) symbol(:default)
  operator([)ident(game) ident(unit) ident(module-id)operator(])
  operator(()ident(utils/trace) string<delimiter(")content(modules.cycle)delimiter(")>  string<delimiter(")content(Cyceling module:)delimiter(")> ident(module-id)operator(\)) 
  operator(()ident(default-module-cycle) ident(game) ident(unit) ident(module-id)operator(\))operator(\))operator(()reserved(ns) ident(net.licenser.epic.modules.damage)
  operator(()symbol(:use) ident(net.licenser.epic.utils)operator(\))
  operator(()symbol(:use) ident(net.licenser.epic.modules)operator(\))operator(\))

operator(()reserved(defmulti) ident(module-hit-static)
  string<delimiter(")content(This method is called for every module if it be hit.)delimiter(")>
  operator(()reserved(fn) operator([)ident(module) ident(_) ident(_)operator(]) operator(()ident(trace) string<delimiter(")content(module-hit-static(dispatcher\))delimiter(")> string<delimiter(")content(got:)delimiter(")> operator(()symbol(:type) ident(module)operator(\))operator(\)) operator(()symbol(:type) ident(module)operator(\))operator(\))operator(\))

operator(()reserved(defmethod) ident(module-hit-static) symbol(:armor)
  operator([)ident(module) ident(damage) reserved(partial)operator(])
  operator(()reserved(let) operator([)ident(my-dmg) ident(damage)
	ident(damage-absorbation) operator(()symbol(:damage-absorbation) operator(()symbol(:specification) ident(module)operator(\))operator(\))
	ident(hull) operator(()reserved(max) integer(0) operator(()reserved(-) operator(()symbol(:hull) ident(module)operator(\)) operator(()symbol(:damage) ident(module)operator(\))operator(\))operator(\))
	ident(damage-absorbation) operator(()reserved(min) ident(hull) ident(damage-absorbation)operator(\))
	ident(damage) operator(()reserved(max) integer(0) operator(()reserved(-) ident(damage) ident(damage-absorbation)operator(\))operator(\))operator(])
    operator({)symbol(:module) operator(()ident(damage-module) ident(module) ident(my-dmg)operator(\))
     symbol(:damage) ident(damage)
     symbol(:partial) operator(()reserved(if) operator(()reserved(>)reserved(=) ident(damage-absorbation) integer(0)operator(\)) operator(()reserved(cons) operator({)symbol(:type) symbol(:armor_impact) symbol(:damage) ident(my-dmg) symbol(:hp) ident(hull)operator(}) reserved(partial)operator(\)) reserved(partial)operator(\))
     symbol(:continue) operator(()reserved(if) operator(()reserved(<)reserved(=) ident(damage) integer(0)operator(\)) pre_constant(false) pre_constant(true)operator(\))operator(})operator(\))operator(\))

operator(()reserved(defmethod) ident(module-hit-static) symbol(:shield)
  operator([)ident(module) ident(damage) reserved(partial)operator(])
  operator(()reserved(let) operator([)ident(e) operator(()symbol(:energy) operator(()symbol(:specification) ident(module)operator(\))operator(\))
	ident(my-dmg) operator(()reserved(min) ident(damage) ident(e)operator(\))
	ident(damage) operator(()reserved(-) ident(damage) ident(my-dmg)operator(\))
	ident(hull) operator(()reserved(max) integer(0) operator(()reserved(-) operator(()symbol(:hull) ident(module)operator(\)) ident(damage)operator(\))operator(\))operator(])
    operator({)symbol(:module) operator(()reserved(update-in) operator(()ident(damage-module) ident(module) ident(damage)operator(\))
	       operator([)symbol(:specification) symbol(:energy)operator(]) operator(#()reserved(-) ident(%) ident(my-dmg)operator(\))operator(\))
     symbol(:partial) operator(()reserved(if) operator(()reserved(=) integer(0) ident(damage)operator(\)) operator(()reserved(cons) operator({)symbol(:type) symbol(:shield_impact) symbol(:damage) ident(my-dmg) symbol(:hp) ident(hull)operator(}) reserved(partial)operator(\)) reserved(partial)operator(\))
     symbol(:damage) ident(damage)
     symbol(:continue) operator(()reserved(if) operator(()reserved(<)reserved(=) ident(damage) integer(0)operator(\)) pre_constant(false) pre_constant(true)operator(\))operator(})operator(\))operator(\))

operator(()reserved(defmethod) ident(module-hit-static) symbol(:hull)
  operator([)ident(module) ident(damage) reserved(partial)operator(])
  operator(()reserved(let) operator([)ident(m) operator(()ident(damage-module) ident(module) ident(damage)operator(\))operator(])
    operator({)symbol(:module) ident(m) 
     symbol(:partial) operator(()reserved(cons) operator({)symbol(:type) symbol(:impact) symbol(:damage) ident(damage) symbol(:hp) operator(()reserved(-) operator(()symbol(:hull) ident(m)operator(\)) operator(()symbol(:damage) ident(m)operator(\))operator(\))operator(}) reserved(partial)operator(\))
     symbol(:damage) ident(damage) symbol(:continue) pre_constant(true)operator(})operator(\))operator(\))

operator(()reserved(defmethod) ident(module-hit-static) symbol(:default)
  operator([)ident(module) ident(damage) reserved(partial)operator(])
  operator({)symbol(:module) operator(()ident(damage-module) ident(module) ident(damage)operator(\)) symbol(:damage) ident(damage) symbol(:continue) pre_constant(true) symbol(:partial) reserved(partial)operator(})operator(\))

operator(()reserved(defn) ident(module-hit)
  operator(()operator([)ident(module) ident(damage) ident(prop) reserved(partial)operator(])
     operator(()reserved(if) operator(()reserved(and) 
	  operator(()reserved(<) ident(prop) operator(()symbol(:hit-propability) ident(module)operator(\))operator(\))
	  operator(()reserved(not) operator(()ident(module-destroyed?) ident(module)operator(\))operator(\))operator(\))
       operator(()ident(module-hit-static) ident(module) ident(damage) reserved(partial)operator(\))
       operator({)symbol(:module) ident(module) symbol(:damage) ident(damage) symbol(:continue) pre_constant(true) symbol(:partial) reserved(partial)operator(})operator(\))operator(\))
  operator(()operator([)ident(module) ident(damage) reserved(partial)operator(])
     operator(()ident(module-hit) ident(module) ident(damage) operator(()reserved(rand)operator(\)) reserved(partial)operator(\))operator(\))operator(\))operator(()reserved(ns) ident(net.licenser.epic.modules.usage)
  operator(()symbol(:require) operator([)ident(net.licenser.epic.utils) symbol(:as) ident(utils)operator(])operator(\))operator(\))
operator(()reserved(ns) ident(net.licenser.epic.modules)
  operator(()symbol(:use) ident(net.licenser.epic.utils)operator(\))operator(\))

operator(()reserved(defstruct) ident(module)
  symbol(:id) symbol(:type) symbol(:name) symbol(:size) symbol(:cycle-script) symbol(:specification) symbol(:mass) symbol(:hull) symbol(:damage) symbol(:hit-propability) symbol(:hit-priority)operator(\))

operator(()reserved(defn) ident(default-unit-hit-fn)
  operator([)ident(attacker) ident(weapon) ident(target)operator(])
  operator(()reserved(let) operator([)ident(dist) operator(()reserved(int) operator(()ident(map-distance) operator(@)ident(attacker) operator(@)ident(target)operator(\))operator(\))
	ident(weapon-hull) operator(()symbol(:hull) ident(weapon)operator(\))
	ident(weapon-damage) operator(()symbol(:damage) ident(weapon)operator(\))
	ident(damage-penalty) operator(()reserved(/) operator(()reserved(-) ident(weapon-hull) ident(weapon-damage)operator(\)) ident(weapon-hull)operator(\))
	ident(accuracy) operator(()ident(module-spec) ident(weapon) symbol(:accuracy)operator(\))
	ident(variation) operator(()reserved(int) operator(()reserved(inc) operator(()ident(module-spec) ident(weapon) symbol(:variation)operator(\))operator(\))operator(\))
	reserved(range) operator(()reserved(int) operator(()ident(module-spec) ident(weapon) symbol(:range)operator(\))operator(\))
	ident(rotatability) operator(()ident(module-spec) ident(weapon) symbol(:rotatability)operator(\))
	ident(a-manuv) operator(()ident(module-spec) operator(()reserved(first) operator(()ident(get-modules) operator(@)ident(attacker) symbol(:hull)operator(\))operator(\)) symbol(:maneuverability)operator(\))
	ident(t-manuv) operator(()ident(module-spec) operator(()reserved(first) operator(()ident(get-modules) operator(@)ident(target) symbol(:hull)operator(\))operator(\)) symbol(:maneuverability)operator(\))
	ident(aim) operator(()reserved(+) 
	     operator(()reserved(*) ident(damage-penalty) operator(()reserved(/) operator(()reserved(*) ident(accuracy) operator(()reserved(+) integer(2) operator(()reserved(rand)operator(\))operator(\))operator(\))integer(3)operator(\))operator(\)) 
	     operator(()reserved(/) operator(()reserved(-) ident(variation) operator(()reserved(int) operator(()ident(Math/abs) operator(()reserved(-) reserved(range) ident(dist)operator(\))operator(\))operator(\))operator(\)) ident(variation) integer(2)operator(\))operator(\))
	ident(mass) operator(()ident(Math/log10) operator(()reserved(+) operator(()reserved(/) operator(()ident(Math/pow) operator(()ident(unit-mass) ident(target)operator(\)) integer(1/3)operator(\)) operator(()reserved(max) ident(dist) integer(1)operator(\))operator(\)) integer(1)operator(\))operator(\))
	ident(aiming) operator(()reserved(*)
		operator(()reserved(+)
		 operator(()reserved(/) operator(()reserved(*) ident(a-manuv) operator(()reserved(+) integer(2) operator(()reserved(rand)operator(\))operator(\))operator(\)) integer(3)operator(\))
		 ident(rotatability)operator(\))
		ident(aim)operator(\))
	ident(evade) operator(()reserved(/) operator(()reserved(*) ident(t-manuv) operator(()reserved(+) integer(2) operator(()reserved(rand)operator(\))operator(\))operator(\)) integer(3)operator(\))operator(])
    operator(()reserved(>) integer(1) operator(()reserved(*) operator(()reserved(/) ident(aiming) ident(evade)operator(\)) ident(mass)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(default-module-hit-fn)
  operator([)ident(m)operator(])
  operator(()reserved(>) operator(()reserved(rand)operator(\)) operator(()symbol(:hit-propability) ident(m)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(create-hull)
  operator([)reserved(name) ident(size) ident(mass) ident(hull) ident(maneuverability)operator(])
  operator(()reserved(struct) ident(module) ident(nil) symbol(:hull) reserved(name) ident(size) ident(nil) operator({)symbol(:maneuverability) ident(maneuverability)operator(}) ident(mass) ident(hull) integer(0) float(1.0) float(0.0)operator(\))operator(\))

operator(()reserved(defn) ident(create-generic)
  operator([)reserved(type) reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(max-usage) ident(energy-usage)operator(])
  operator(()reserved(struct) ident(module) ident(nil) reserved(type) reserved(name) ident(size) ident(nil) operator({)symbol(:max-usage) ident(max-usage) symbol(:times-used) integer(0) symbol(:energy-usage) ident(energy-usage)operator(}) ident(mass) ident(hull) integer(0) ident(hit-priority) ident(energy-usage)operator(\))operator(\))

operator(()reserved(defn) ident(create-engine)
  operator([)reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) reserved(range) ident(energy-usage)operator(])
  operator(()ident(create-generic) symbol(:engine) reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) reserved(range) ident(energy-usage)operator(\))operator(\))

operator(()reserved(defn) ident(create-weapon)
  operator(()operator([)reserved(name)  ident(size)  ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(damage) ident(fire-rate) reserved(range) ident(variation) ident(accuracy) ident(rotatability) ident(energy-usage) ident(unit-hit-fn) ident(module-hit-fn)operator(])
  operator(()reserved(update-in) 
   operator(()ident(create-generic) symbol(:weapon) reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(fire-rate) ident(energy-usage)operator(\))
   operator([)symbol(:specification)operator(])
   operator(#()reserved(assoc) ident(%) 
      symbol(:damage) ident(damage)
      symbol(:accuracy) ident(accuracy)
      symbol(:rotatability) ident(rotatability)
      symbol(:energy-usage) ident(energy-usage)
      symbol(:unit-hit-fn) ident(unit-hit-fn)
      symbol(:module-hit-fn) ident(module-hit-fn)
      symbol(:range) reserved(range)
      symbol(:variation) ident(variation)
      operator(\))operator(\))operator(\))
  operator(()operator([)reserved(name)  ident(size)  ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(damage) ident(fire-rate) reserved(range) ident(variation) ident(accuracy) ident(rotatability) ident(energy-usage)operator(])
     operator(()ident(create-weapon)
     reserved(name)  ident(size)  ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(damage) ident(fire-rate) reserved(range) ident(variation) ident(accuracy) ident(rotatability) ident(energy-usage)
      ident(default-unit-hit-fn) ident(default-module-hit-fn)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(create-shield)
  operator([)reserved(name) ident(size) ident(mass) ident(hull) ident(energy)operator(])
  operator(()reserved(struct) ident(module) ident(nil) symbol(:shield) reserved(name) ident(size) ident(nil) operator({)symbol(:max-energy) ident(energy) symbol(:energy) ident(energy)operator(}) ident(mass) ident(hull) integer(0) float(1.0) float(0.99)operator(\))operator(\))


operator(()reserved(defn) ident(create-reactor)
  operator([)reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(discharge-rate) ident(output) ident(capacity) ident(efficientcy)operator(])
  operator(()reserved(struct) ident(module) ident(nil) symbol(:reactor)
	  reserved(name) ident(size) ident(nil)
	  operator({)symbol(:capacity) ident(capacity) symbol(:energy) ident(capacity) symbol(:output) ident(output) symbol(:discharge-rate) ident(discharge-rate) symbol(:discharged) integer(0) symbol(:efficientcy) ident(efficientcy)operator(})
	  ident(mass) ident(hull) integer(0)
	  ident(hit-propability) ident(hit-priority)operator(\))operator(\))

operator(()reserved(defn) ident(create-armor)
  operator([)reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(damage-absorbtion)operator(])
  operator(()reserved(struct) ident(module) ident(nil) symbol(:armor)
	  reserved(name) ident(size) ident(nil)
	  operator({)symbol(:damage-absorbation) ident(damage-absorbtion)operator(})
	  ident(mass) ident(hull) integer(0)
	  ident(hit-propability) ident(hit-priority)operator(\))operator(\))

operator(()reserved(defn) ident(damage-module)
  operator([)ident(module) ident(damage)operator(])
  operator(()reserved(update-in) ident(module) operator([)symbol(:damage)operator(]) operator(#()reserved(min) operator(()symbol(:hull) ident(module)operator(\)) operator(()reserved(+) ident(%) ident(damage)operator(\))operator(\))operator(\))operator(\))
  
operator(()reserved(defn) ident(module-destroyed?)
  operator([)ident(module)operator(])
  operator(()reserved(>)reserved(=) operator(()symbol(:damage) ident(module)operator(\)) operator(()symbol(:hull) ident(module)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(remaining-usages)
  operator([)ident(module)operator(])
  operator(()reserved(let) operator([)ident(s) operator(()ident(module-spec) ident(module)operator(\))operator(])
    operator(()reserved(-) operator(()symbol(:max-usage) ident(s)operator(\)) operator(()symbol(:times-used) ident(s)operator(\))operator(\))operator(\))operator(\))
operator(()reserved(ns) ident(net.licenser.epic.units.functions)operator(\))

operator(()reserved(defn) ident(move-unit)
  operator([)ident(game) ident(unit-id) ident(x) ident(y)operator(])operator(\))
operator(()reserved(ns) ident(net.licenser.epic.units)
  operator(()symbol(:require) operator(()ident(net.licenser.epic) operator([)ident(modules) symbol(:as) ident(modules)operator(]) operator([)ident(utils) symbol(:as) ident(utils)operator(])operator(\))operator(\))
  operator(()symbol(:require) operator([)ident(net.licenser.epic.modules.damage) symbol(:as) ident(modules.damage)operator(])operator(\))
  operator(()symbol(:require) operator([)ident(net.licenser.epic.modules.cycle) symbol(:as) ident(modules.cycle)operator(])operator(\))operator(\))

operator(()reserved(defstruct) ident(unit) symbol(:id) symbol(:name) symbol(:team) symbol(:cycle-script) symbol(:x) symbol(:y) symbol(:modules) symbol(:destroyed) symbol(:last-target)operator(\))

operator(()reserved(defn) ident(no-script-) operator([)ident(game) ident(unit-id)operator(])
  ident(game)operator(\))

operator(()reserved(defn) ident(create-unit)
  operator([)ident(id) reserved(name) ident(team) ident(cycle-script) ident(x) ident(y) ident(&) ident(modules)operator(])
  operator(()reserved(struct) ident(unit) ident(id) reserved(name) ident(team) operator(()reserved(or) ident(cycle-script) ident(no-script-)operator(\)) ident(x) ident(y) operator(()reserved(reduce) operator(#()reserved(let) operator([)ident(id) operator(()ident(utils/uuid)operator(\))operator(]) operator(()reserved(assoc) ident(%1) ident(id) operator(()reserved(assoc) ident(%2) symbol(:id) ident(id)operator(\))operator(\))operator(\)) operator({)operator(}) ident(modules)operator(\)) pre_constant(false) ident(nil)operator(\))operator(\))

operator(()reserved(defn) ident(main-engine)
  operator([)ident(unit)operator(])
   operator(()reserved(first) operator(()reserved(sort-by) operator(()reserved(partial) ident(utils/module-spec) symbol(:range)operator(\)) operator(()ident(utils/get-modules) ident(unit) symbol(:engine)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(unit-range)
  operator([)ident(unit)operator(])
   operator(()reserved(let) operator([)ident(r) operator(()ident(main-engine) ident(unit)operator(\))operator(])
     operator(()ident(modules/remaining-usages) ident(r)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(unit-destroyed?)
  operator([)ident(unit)operator(])
   operator(()reserved(let) operator([)ident(h) operator(()reserved(first) operator(()ident(utils/get-modules) ident(unit) symbol(:hull)operator(\))operator(\))operator(])
     operator(()reserved(>)reserved(=) operator(()symbol(:damage) ident(h)operator(\)) operator(()symbol(:hull) ident(h)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn-) ident(update-unit)
  operator([)ident(unit) ident(update-fn)operator(])
  operator(()reserved(dosync)
     operator(()reserved(alter) ident(unit) ident(update-fn)operator(\))operator(\))operator(\))

operator(()reserved(defn-) ident(make-module-list)
  operator([)ident(modules)operator(])
  operator(()reserved(if) operator(()reserved(empty?) ident(modules)operator(\))
    operator({)operator(})
    operator(()reserved(let) operator([)ident(m) operator(()reserved(first) ident(modules)operator(\))operator(])
      operator(()reserved(assoc) operator(()ident(make-module-list) operator(()reserved(rest) ident(modules)operator(\))operator(\)) operator(()symbol(:id) ident(m)operator(\)) ident(m)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn-) ident(hit-unit-modules)
  operator([)ident(modules) ident(damage) reserved(partial)operator(])
  operator(()reserved(if) ident(modules)
    operator(()reserved(let) operator([)ident(m) operator(()reserved(first) ident(modules)operator(\))
	  ident(ms) operator(()reserved(next) ident(modules)operator(\))operator(])
      operator(()reserved(if) operator(()ident(modules/module-destroyed?) ident(m)operator(\))
	operator(()reserved(let) operator([)operator({)ident(ms) symbol(:modules) ident(ps) symbol(:partial)operator(}) operator(()ident(hit-unit-modules) ident(ms) ident(damage) reserved(partial)operator(\))operator(])
	  operator({)symbol(:modules) operator(()reserved(assoc) ident(ms) operator(()symbol(:id) ident(m)operator(\)) ident(m)operator(\)) symbol(:partial) operator(()reserved(concat) ident(ps) reserved(partial)operator(\))operator(})operator(\))
	operator(()reserved(let)operator([)ident(t) operator(()ident(modules.damage/module-hit) ident(m) ident(damage) reserved(partial)operator(\))
	     operator({)ident(damage) symbol(:damage) ident(m) symbol(:module) ident(continue) symbol(:continue) ident(ps) symbol(:partial)operator(}) ident(t)
	     ident(ps) operator(()reserved(if) operator(()ident(modules/module-destroyed?) ident(m)operator(\)) operator(()reserved(cons) operator({)symbol(:type) symbol(:module_destroyed) symbol(:module) operator(()symbol(:id) ident(m)operator(\))operator(}) ident(ps)operator(\)) ident(ps)operator(\))operator(])
	  operator(()ident(utils/trace) string<delimiter(")content(hit-unit-modules)delimiter(")> string<delimiter(")content(hitting module:)delimiter(")> ident(m)operator(\))  
	  operator(()reserved(if) operator(()reserved(or) operator(()reserved(not) ident(continue)operator(\)) operator(()reserved(<)reserved(=) ident(damage) integer(0)operator(\))operator(\))
	    operator(()reserved(do) 
	      operator(()ident(utils/trace) string<delimiter(")content(hit-unit-modules)delimiter(")> string<delimiter(")content(last module:)delimiter(")> ident(m)operator(\))
	      operator(()reserved(let) operator([)ident(ms) operator(()ident(make-module-list) ident(ms)operator(\))operator(])
		operator(()ident(utils/trace) string<delimiter(")content(hit-unit-modules)delimiter(")> string<delimiter(")content(generated module list:)delimiter(")> ident(ms)operator(\))
		operator({)symbol(:modules) operator(()reserved(assoc) ident(ms) operator(()symbol(:id) ident(m)operator(\)) ident(m)operator(\)) symbol(:partial) operator(()reserved(concat) ident(ps) reserved(partial)operator(\))operator(})operator(\))operator(\))
	    operator(()reserved(do)
	      operator(()ident(utils/trace) string<delimiter(")content(hit-unit-modules)delimiter(")> string<delimiter(")content(handled module:)delimiter(")> ident(m)operator(\))
	      operator(()reserved(let) operator([)operator({)ident(ms) symbol(:modules) reserved(partial) symbol(:partial)operator(}) operator(()ident(hit-unit-modules) ident(ms) ident(damage) reserved(partial)operator(\))operator(])
	      operator({)symbol(:modules) operator(()reserved(assoc) ident(ms) operator(()symbol(:id) ident(m)operator(\)) ident(m)operator(\)) symbol(:partial) operator(()reserved(concat) ident(ps) reserved(partial)operator(\))operator(})operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
    operator({)symbol(:modules) operator({)operator(}) symbol(:partial) reserved(partial)operator(})operator(\))operator(\))


operator(()reserved(defn) ident(init-unit)
  operator([)ident(unit)operator(])
  operator(()reserved(assoc) ident(unit) symbol(:id) operator(()ident(utils/uuid)operator(\))operator(\))operator(\))

operator(()reserved(defn-) ident(hit-unit-priv)
  operator([)ident(damage) ident(attacker) ident(unit)operator(])
   operator(()reserved(let) operator([)ident(id) operator(()symbol(:id) ident(unit)operator(\))
	 ident(ms) operator(()reserved(reverse) operator(()reserved(sort-by) operator(#()symbol(:hit-priority) ident(%)operator(\)) operator(()reserved(vals) operator(()symbol(:modules) ident(unit)operator(\))operator(\))operator(\))operator(\))
	 operator({)ident(ms) symbol(:modules) ident(ps) symbol(:partial)operator(}) operator(()ident(hit-unit-modules) ident(ms) ident(damage) operator(')operator(()operator(\))operator(\))
	 ident(unit) operator(()reserved(assoc) ident(unit) symbol(:modules) ident(ms)operator(\))operator(])
     operator(()ident(utils/combat-log) symbol(:attack)
		       operator({)
			symbol(:unit) operator(()symbol(:id) ident(attacker)operator(\))
			symbol(:target) ident(id)
			symbol(:damage) integer(5)
			symbol(:partials) ident(ps)
			operator(})operator(\))
     operator(()reserved(if) operator(()ident(unit-destroyed?) ident(unit)operator(\))
       operator(()reserved(do)
	 operator(()ident(utils/combat-log) symbol(:destroyed) operator({)symbol(:unit) operator(()symbol(:id) ident(unit)operator(\)) symbol(:partials) ident(ps)operator(})operator(\))
	 operator(()reserved(assoc) ident(unit) symbol(:destroyed) pre_constant(true)operator(\))operator(\))
       ident(unit)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(unit-energy)
  operator([)ident(unit)operator(])
  operator(()reserved(dosync)
   operator(()reserved(reduce) reserved(+) operator(()reserved(map) operator(()reserved(partial) ident(utils/module-spec) symbol(:energy)operator(\)) operator(()ident(utils/get-modules) operator(@)ident(unit) symbol(:reactor)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(hit-unit)
  operator([)ident(game) ident(unit) ident(attacker) ident(damage)operator(])
  operator(()ident(utils/trace) string<delimiter(")content(hit-unit)delimiter(")> string<delimiter(")content(hitting unit:)delimiter(")> operator(()reserved(type) ident(unit)operator(\)) string<delimiter(")content(with:)delimiter(")> ident(damage) string<delimiter(")content(attacker:)delimiter(")> operator(()reserved(type) ident(attacker)operator(\))operator(\))
  operator(()reserved(dosync)
   operator(()ident(update-unit)
    ident(unit)
    operator(()reserved(partial) ident(hit-unit-priv) ident(damage) operator(@)ident(attacker)operator(\))operator(\))
   operator(()reserved(if) operator(()ident(unit-destroyed?) operator(@)ident(unit)operator(\))
     operator(()reserved(alter) operator(()ident(utils/get-field) operator(()symbol(:map) ident(game)operator(\)) operator(()symbol(:x) operator(@)ident(unit)operator(\)) operator(()symbol(:y) operator(@)ident(unit)operator(\))operator(\))  operator(#()reserved(doall) operator(()reserved(remove) operator(()reserved(partial) reserved(=) operator(()symbol(:id) operator(@)ident(unit)operator(\))operator(\)) ident(%)operator(\))operator(\))operator(\))operator(\))operator(\))
  ident(unit)operator(\))

operator(()reserved(defn) ident(unit-can-move-to?)
  operator([)ident(unit) ident(x) ident(y)operator(])
  operator(()reserved(let) operator([)ident(d) operator(()ident(utils/map-distance) operator(()symbol(:x) ident(unit)operator(\)) operator(()symbol(:y) ident(unit)operator(\)) ident(x) ident(y)operator(\))operator(])
    operator(()reserved(and)
     operator(()reserved(>)reserved(=) operator(()ident(unit-range) ident(unit)operator(\)) ident(d)operator(\))
     operator(()reserved(>)reserved(=) operator(()ident(unit-energy) ident(unit)operator(\)) operator(()reserved(*) operator(()ident(utils/module-spec) symbol(:energy-usage) operator(()ident(main-engine) ident(unit)operator(\))operator(\)) ident(d)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(cycle-unit)
  operator([)ident(game) ident(unit)operator(])
    operator(()reserved(if) operator(()symbol(:destroyed) operator(@)ident(unit)operator(\))
      operator(()reserved(do)
	operator(()ident(utils/trace) operator(')ident(units) string<delimiter(")content(Cycling unit: )delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\)) string<delimiter(")content((destroyed\))delimiter(")>operator(\))
	ident(game)operator(\))
      operator(()reserved(do)
	operator(()ident(utils/trace) operator(')ident(units) string<delimiter(")content(Cycling unit: )delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\))operator(\))
	operator(()reserved(let) operator([)ident(mods) operator(()reserved(map) operator(#()symbol(:id) ident(%)operator(\)) operator(()ident(utils/get-modules) operator(@)ident(unit)operator(\))operator(\))operator(])
	  operator(()reserved(dorun) operator(()reserved(map) operator(#()ident(modules.cycle/cycle-module) ident(game) ident(unit) ident(%)operator(\)) ident(mods)operator(\))operator(\))operator(\))
	operator(()reserved(if) operator(()symbol(:cycle-script) operator(@)ident(unit)operator(\))
	  operator(()reserved(do)
	    operator(()ident(utils/trace) string<delimiter(")content(units.cycle-unit)delimiter(")> string<delimiter(")content(Running custom script)delimiter(")>operator(\))
	    operator(()operator(()symbol(:cycle-script) operator(@)ident(unit)operator(\)) operator({)operator(')ident(net.licenser.epic.utils/*cycle-log*) ident(utils/*cycle-log*) operator(')pre_constant(*out*) pre_constant(*out*)operator(})operator(\))
	    ident(game)operator(\))
	  ident(game)operator(\))operator(\))operator(\))operator(\))operator(()reserved(ns) ident(net.licenser.epic.utils)
  comment(;(:require [clojure.contrib.io :as c.c.io]\))
  operator(()symbol(:import) ident(java.util.UUID)operator(\))operator(\))

operator(()reserved(def) ident(*trace*) pre_constant(false)operator(\))

operator(()reserved(declare) ident(*log*)operator(\))

operator(()reserved(defn) ident(module-spec)
  operator(()operator([)ident(module) ident(spec)operator(])
     operator(()reserved(get) operator(()symbol(:specification) ident(module)operator(\)) ident(spec)operator(\))operator(\))
  operator(()operator([)ident(module)operator(]) operator(()symbol(:specification) ident(module)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(get-module)
  operator([)ident(unit) ident(module-id)operator(])
    operator(()reserved(get) operator(()symbol(:modules) ident(unit)operator(\)) ident(module-id) ident(nil)operator(\))operator(\))

operator(()reserved(defn) ident(get-modules)
  operator(()operator([)ident(unit)operator(])
     operator(()reserved(vals) operator(()symbol(:modules) ident(unit)operator(\))operator(\))operator(\))
  operator(()operator([)ident(unit) reserved(type)operator(])
     operator(()reserved(filter) operator(#()reserved(=) reserved(type) operator(()symbol(:type) ident(%)operator(\))operator(\)) operator(()ident(get-modules) ident(unit)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(unit-energy)
  operator([)ident(unit)operator(])
  operator(()reserved(reduce) reserved(+) integer(0) operator(()reserved(map) operator(#()ident(module-spec) ident(%) symbol(:energy)operator(\)) operator(()ident(get-modules) ident(unit) symbol(:reactor)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(use-energy)
  operator([)ident(unit) ident(energy)operator(])
     operator(()reserved(let) operator([)ident(energy) operator(()reserved(ref) ident(energy)operator(\))operator(])
       operator(()reserved(dosync)
	operator(()reserved(if) operator(()reserved(<) operator(@)ident(energy) operator(()ident(unit-energy) operator(@)ident(unit)operator(\))operator(\))
	  operator(()reserved(do)
	    operator(()reserved(alter) 
	     ident(unit) reserved(assoc) symbol(:modules) 
	     operator(()reserved(reduce) 
	      operator(#()reserved(assoc) ident(%1) operator(()symbol(:id) ident(%2)operator(\)) ident(%2)operator(\)) operator({)operator(})
	      operator(()reserved(map) operator(()reserved(fn) operator([)ident(m)operator(]) operator(()reserved(if) operator(()reserved(=) operator(()symbol(:type) ident(m)operator(\)) symbol(:reactor)operator(\))
			     operator(()reserved(let) operator([)ident(e) operator(()ident(module-spec) ident(m) symbol(:energy)operator(\))
				   ident(used-e) operator(()reserved(min) operator(@)ident(energy) ident(e)operator(\))operator(])
			       operator(()reserved(alter) ident(energy) reserved(-) ident(used-e)operator(\))
			       operator(()reserved(update-in) ident(m) operator([)symbol(:specification) symbol(:energy)operator(]) operator(#()reserved(-) ident(%) ident(used-e)operator(\))operator(\))operator(\))
			     ident(m)operator(\))operator(\))
		   operator(()reserved(vals) operator(()symbol(:modules) operator(@)ident(unit)operator(\))operator(\))operator(\))operator(\))operator(\))
	    pre_constant(true)operator(\))
	  pre_constant(false)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(unit-mass)
  operator([)ident(unit)operator(])
  operator(()reserved(reduce) reserved(+) operator(()reserved(map) operator(()reserved(fn) operator([)ident(m)operator(]) operator(()symbol(:mass) ident(m)operator(\))operator(\)) operator(()ident(get-modules) ident(unit)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(unit-hull) operator([)ident(unit)operator(])
  operator(()symbol(:hull) operator(()reserved(first) operator(()ident(get-modules) ident(unit) symbol(:hull)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(unit-data) operator([)ident(unit)operator(])
  operator({)symbol(:id) operator(()symbol(:id) ident(unit)operator(\))
   symbol(:damage) integer(0)
   symbol(:type) operator({)
	  symbol(:name) operator(()symbol(:name) operator(()reserved(first) operator(()ident(get-modules) ident(unit) symbol(:hull)operator(\))operator(\))operator(\))
	  symbol(:hull) operator(()ident(unit-hull) ident(unit)operator(\))operator(})
   symbol(:team) operator(()symbol(:team) ident(unit)operator(\))
   symbol(:mass) operator(()ident(unit-mass) ident(unit)operator(\))
   symbol(:modules) operator(')operator(()operator(\))operator(})operator(\))

operator(()reserved(def) ident(*cycle-log*) operator(()reserved(ref) operator([)operator(])operator(\))operator(\))

operator(()reserved(defn) ident(cycle-log) operator([)operator(])
  operator(()reserved(dosync)
   operator(()reserved(alter) ident(*log*) reserved(conj) operator(@)ident(*cycle-log*)operator(\))
   operator(()reserved(ref-set) ident(*cycle-log*) operator([)operator(])operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(combat-log) operator([)reserved(type) ident(msg)operator(])
  operator(()reserved(dosync)
   operator(()reserved(alter) ident(net.licenser.epic.utils/*cycle-log*) reserved(conj) operator(()reserved(assoc) ident(msg) symbol(:type) reserved(type)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(log) operator([)ident(prefix) ident(id) ident(&) ident(msgs)operator(])
  operator(()reserved(binding) operator([)pre_constant(*out*) pre_constant(*err*)operator(])
	operator(()reserved(apply) reserved(println) operator(()reserved(str) ident(prefix) string<delimiter(")content(<)delimiter(")> ident(id) string<delimiter(")content(>:)delimiter(")>operator(\)) ident(msgs)operator(\))operator(\))operator(\))

comment(;(defmacro trace [id & msgs])
comment(;  (if *trace*)
comment(;    `(apply log "Trace" ~id (seq ~msgs\)\)\)\))

operator(()reserved(defn) ident(trace) operator([)ident(id) ident(&) ident(msgs)operator(])
  operator(()reserved(if) ident(*trace*)
    operator(()reserved(apply) ident(log) string<delimiter(")content(Trace)delimiter(")> ident(id) ident(msgs)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(update-module)
  operator([)ident(unit) ident(module-id) ident(update-fn)operator(])
  operator(()ident(trace) string<delimiter(")content(update-module)delimiter(")> string<delimiter(")content(updating)delimiter(")> ident(module-id) operator(()reserved(str) string<delimiter(")content(()delimiter(")> operator(()symbol(:type) operator(()ident(get-module) operator(@)ident(unit) ident(module-id)operator(\))operator(\)) string<delimiter(")content(\))delimiter(")>operator(\)) string<delimiter(")content(of)delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\))operator(\))
  operator(()reserved(dosync)
   operator(()reserved(alter) ident(unit) reserved(update-in) operator([)symbol(:modules) ident(module-id)operator(]) ident(update-fn)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(update-module-specs)
  operator(()operator([)ident(unit) ident(module-id) ident(update-fn)operator(])
     operator(()ident(update-module) ident(unit) ident(module-id) operator(()reserved(fn) operator([)ident(m)operator(]) operator(()reserved(assoc) ident(m) symbol(:specification) operator(()ident(update-fn) operator(()symbol(:specification)  ident(m)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
  operator(()operator([)ident(unit) ident(module-id) ident(spec) ident(update-fn)operator(])
     operator(()ident(update-module-specs) ident(unit) ident(module-id) operator(()reserved(fn) operator([)ident(s)operator(]) operator(()reserved(assoc) ident(s) ident(spec) operator(()ident(update-fn) operator(()reserved(get) ident(s) ident(spec)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(get-unit)
  operator([)ident(game) ident(unit-id)operator(])
  operator(()reserved(get) operator(()symbol(:units) ident(game)operator(\)) ident(unit-id) ident(nil)operator(\))operator(\))

operator(()reserved(defn) ident(in-direction)
  operator(()operator([)ident(x) ident(y) ident(direction)operator(])
  operator(()reserved(condp) reserved(=) operator(()reserved(int) ident(direction)operator(\))
    integer(0) operator([)operator(()reserved(inc) ident(x)operator(\)) operator(()reserved(inc) ident(y)operator(\))operator(])
    integer(1) operator([)operator(()reserved(inc) ident(x)operator(\)) ident(y)operator(])
    integer(2) operator([)ident(x) operator(()reserved(dec) ident(y)operator(\))operator(])
    integer(3) operator([)operator(()reserved(dec) ident(x)operator(\)) operator(()reserved(dec) ident(y)operator(\))operator(])
    integer(4) operator([)operator(()reserved(dec) ident(x)operator(\)) ident(y)operator(])
    integer(5) operator([)ident(x) operator(()reserved(inc) ident(y)operator(\))operator(])operator(\))operator(\))
  operator(()operator([)ident(u) ident(direction)operator(])
     operator(()ident(in-direction) operator(()symbol(:x) ident(u)operator(\)) operator(()symbol(:y) ident(u)operator(\)) ident(direction)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(to-evil) operator([)ident(x) ident(y)operator(])
  operator([)operator(()reserved(-) ident(x) ident(y)operator(\)) operator(()reserved(int) operator(()ident(Math/floor) operator(()reserved(/) operator(()reserved(*) ident(-1) operator(()reserved(+) ident(x) ident(y)operator(\))operator(\)) float(2.0)operator(\))operator(\))operator(\))operator(])operator(\))

operator(()reserved(defn-) ident(to-cartesian) operator([)ident(x) ident(y)operator(])
  operator(()reserved(let) operator([)operator([)ident(e-x) ident(e-y)operator(]) operator(()ident(to-evil) ident(x) ident(y)operator(\))
	ident(c-x) ident(e-x)
	ident(c-y) operator(()reserved(if) operator(()reserved(odd?) ident(e-x)operator(\)) operator(()reserved(+) float(0.5) ident(e-y)operator(\)) ident(e-y)operator(\))
	ident(c-y) operator(()reserved(*) ident(-1) ident(c-y) operator(()ident(Math/sqrt) integer(3)operator(\))operator(\))operator(])
  operator([)ident(c-x) ident(c-y)operator(])operator(\))operator(\))

operator(()reserved(defn) ident(friction-direction-to)
  operator(()operator([)ident(x1) ident(y1) ident(x2) ident(y2)operator(])

     operator(()reserved(let) operator([)operator([)ident(c-x1) ident(c-y1)operator(]) operator(()ident(to-cartesian) ident(x1) ident(y1)operator(\))
	   operator([)ident(c-x2) ident(c-y2)operator(]) operator(()ident(to-cartesian) ident(x2) ident(y2)operator(\))
	   ident(a) operator(()ident(Math/atan2) operator(()reserved(-) ident(c-y2) ident(c-y1)operator(\)) operator(()reserved(-) ident(c-x2) ident(c-x1)operator(\))operator(\))
	   ident(a) operator(()reserved(-) integer(0) operator(()reserved(/) ident(a) ident(Math/PI)operator(\))operator(\))
	   ident(a) operator(()reserved(+) ident(a) float(0.5)operator(\))
	   ident(a) operator(()reserved(*) ident(a) integer(3)operator(\))
	   ident(a) operator(()reserved(mod) ident(a) integer(6)operator(\))operator(])
       ident(a)operator(\))operator(\))
  operator(()operator([)ident(u1) ident(u2)operator(])
     operator(()ident(friction-direction-to) operator(()symbol(:x) ident(u1)operator(\)) operator(()symbol(:y) ident(u1)operator(\)) operator(()symbol(:x) ident(u2)operator(\)) operator(()symbol(:y) ident(u2)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(direction-to)
  operator(()operator([)ident(x1) ident(y1) ident(x2) ident(y2)operator(])
     operator(()ident(Math/round) type(#^Double) operator(()ident(friction-direction-to) ident(x1) ident(y1) ident(x2) ident(y2)operator(\))operator(\))operator(\))
  operator(()operator([)ident(u1) ident(u2)operator(])
     operator(()ident(direction-to) operator(()symbol(:x) ident(u1)operator(\)) operator(()symbol(:y) ident(u1)operator(\)) operator(()symbol(:x) ident(u2)operator(\)) operator(()symbol(:y) ident(u2)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(uuid)
  operator([)operator(])
  operator(()reserved(.)ident(toString) operator(()ident(UUID/randomUUID)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(static)
  operator([)reserved(val)operator(])
  operator(()reserved(fn) operator([) ident(&) ident(_) operator(]) reserved(val)operator(\))operator(\))

operator(()reserved(defn) ident(map-distance)
  operator(()operator([)ident(u1) ident(u2)operator(])
     operator(()ident(map-distance) operator(()symbol(:x) ident(u1)operator(\)) operator(()symbol(:y) ident(u1)operator(\)) operator(()symbol(:x) ident(u2)operator(\)) operator(()symbol(:y) ident(u2)operator(\))operator(\))operator(\))
  operator(()operator([)ident(x1) ident(y1)  ident(x2) ident(y2)operator(])
    operator(()reserved(let) operator([)ident(x1) operator(()reserved(int) ident(x1)operator(\))
	  ident(x2) operator(()reserved(int) ident(x2)operator(\))
	  ident(y1) operator(()reserved(int) ident(y1)operator(\))
	  ident(y2) operator(()reserved(int) ident(y2)operator(\))
	  ident(dx) operator(()reserved(-) ident(x1) ident(x2)operator(\))
	  ident(dy) operator(()reserved(-) ident(y1) ident(y2)operator(\))
	  ident(ax) operator(()ident(Math/abs) ident(dx)operator(\))
	  ident(ay) operator(()ident(Math/abs) ident(dy)operator(\))operator(])
    operator(()reserved(if) operator(()reserved(=) operator(()reserved(<) ident(dx) integer(0)operator(\)) operator(()reserved(<) ident(dy) integer(0)operator(\))operator(\))
      operator(()reserved(max) ident(ax) ident(ay)operator(\))
      operator(()reserved(+) ident(ax) ident(ay)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(get-field) operator([)reserved(map) ident(x) ident(y)operator(])
  operator(()reserved(dosync)
   operator(()ident(trace) string<delimiter(")content(fet-fied)delimiter(")> ident(x) ident(y)operator(\))
   operator(()reserved(let) operator([)ident(f-x) operator(()reserved(get) operator(@)reserved(map) ident(x)operator(\))operator(])
     operator(()reserved(if) ident(f-x)
       operator(()reserved(let) operator([)ident(f-y) operator(()reserved(get) operator(@)ident(f-x) ident(y)operator(\))operator(])
	 operator(()ident(trace) string<delimiter(")content(fet-fied)delimiter(")> string<delimiter(")content(x already present)delimiter(")>operator(\))
	 operator(()reserved(if) ident(f-y)
	   operator(()reserved(do)
	     operator(()ident(trace) string<delimiter(")content(fet-fied)delimiter(")> string<delimiter(")content(y already present)delimiter(")>operator(\))
	     ident(f-y)operator(\))
	   operator(()reserved(let) operator([)ident(f-y) operator(()reserved(ref) operator(')operator(()operator(\))operator(\))operator(])
	     operator(()reserved(alter) ident(f-x) reserved(assoc) ident(y) ident(f-y)operator(\))
	     ident(f-y)operator(\))operator(\))operator(\))
       operator(()reserved(let) operator([)ident(f-y) operator(()reserved(ref) operator(')operator(()operator(\))operator(\))
	     ident(f-x) operator(()reserved(ref) operator({)ident(y) ident(f-y)operator(})operator(\))operator(])
	 operator(()reserved(alter) reserved(map) reserved(assoc) ident(x) ident(f-x)operator(\))
	 ident(f-y)operator(\))operator(\))operator(\))operator(\))operator(\))operator(()reserved(ns) ident(net.licenser.epic)
  operator(()symbol(:use) ident(net.licenser.epic.utils)operator(\))
  operator(()symbol(:use) ident(net.licenser.epic.game)operator(\))
  operator(()symbol(:use) ident(net.licenser.sandbox)operator(\))
  operator(()symbol(:use) ident(net.licenser.sandbox.tester)operator(\))

  operator(()symbol(:require) operator(()ident(net.licenser.epic) operator([)ident(modules) symbol(:as) ident(modules)operator(]) operator([)ident(units) symbol(:as) ident(units)operator(])operator(\))operator(\))
  operator(()symbol(:require) operator([)ident(clojure.contrib.json.write) symbol(:as) ident(json)operator(])operator(\))
  operator(()symbol(:require) operator([)ident(clojure.contrib.json.read) symbol(:as) ident(jr)operator(])operator(\))  
  operator(()symbol(:require) operator([)ident(clojure.contrib.duck-streams) symbol(:as) ident(io)operator(])operator(\))
  operator(()symbol(:use) ident(net.licenser.epic.game.logic)operator(\))
  operator(()symbol(:use) ident(net.licenser.epic.game.basic)operator(\))
  operator(()symbol(:use) ident(clojure.template)operator(\))
  operator(()symbol(:use) ident(clojure.stacktrace)operator(\))
  operator(()symbol(:use) ident(clojure.contrib.command-line)operator(\))
  operator(()symbol(:gen-class)operator(\))operator(\))

operator(()reserved(def) ident(*compiler*) 
     operator(()ident(stringify-sandbox) operator(()ident(new-sandbox-compiler) symbol(:namespace) operator(')ident(net.licenser.epic.sandbox) symbol(:tester) ident(debug-tester) symbol(:timeout) integer(500)operator(\))operator(\))operator(\))
operator(()reserved(declare) ident(*game*) ident(*unit-id*)operator(\))

operator(()reserved(def) ident(*tick-hard-limit*) integer(500)operator(\))

operator(()reserved(defn) ident(load-data-file)
  operator([)ident(file) ident(add-fn)operator(])
  operator(()reserved(doall)
   operator(()reserved(map) operator(()reserved(fn) operator([)ident(data)operator(]) operator(()ident(add-fn) ident(data)operator(\))operator(\)) operator(()ident(jr/read-json) operator(()reserved(slurp) ident(file)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(def) ident(*modules*) operator(()reserved(ref) operator({)operator(})operator(\))operator(\))

operator(()reserved(def) ident(*scripts*) operator(()reserved(ref) operator({)operator(})operator(\))operator(\))

operator(()reserved(defn) ident(add-hull)
  operator([)operator({)reserved(name) string<delimiter(")content(name)delimiter(")> ident(size) string<delimiter(")content(size)delimiter(")> ident(maneuverability) string<delimiter(")content(maneuverability)delimiter(")> ident(hull) string<delimiter(")content(hull)delimiter(")> ident(mass) string<delimiter(")content(mass)delimiter(")> symbol(:as) ident(data)operator(})operator(])
  operator(()reserved(dosync) operator(()reserved(alter) ident(*modules*) reserved(assoc) reserved(name) operator(()ident(modules/create-hull) reserved(name) ident(size) ident(mass) ident(hull) ident(maneuverability)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(add-engine)
  operator([)operator({)reserved(name) string<delimiter(")content(name)delimiter(")> ident(size) string<delimiter(")content(size)delimiter(")> ident(mass) string<delimiter(")content(mass)delimiter(")> ident(hull) string<delimiter(")content(hull)delimiter(")> ident(hit-propability) string<delimiter(")content(hit-propability)delimiter(")> ident(hit-priority) string<delimiter(")content(hit-priority)delimiter(")> ident(energy-usage) string<delimiter(")content(energy-usage)delimiter(")> reserved(range) string<delimiter(")content(range)delimiter(")>operator(})operator(])
  operator(()reserved(dosync) operator(()reserved(alter) ident(*modules*) reserved(assoc) reserved(name) operator(()ident(modules/create-engine) reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) reserved(range) ident(energy-usage)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(add-armor)
  operator([)operator({)reserved(name) string<delimiter(")content(name)delimiter(")> ident(size) string<delimiter(")content(size)delimiter(")> ident(mass) string<delimiter(")content(mass)delimiter(")> ident(hull) string<delimiter(")content(hull)delimiter(")> ident(hit-propability) string<delimiter(")content(hit-propability)delimiter(")> ident(hit-priority) string<delimiter(")content(hit-priority)delimiter(")> ident(damage-absorbtion) string<delimiter(")content(damage-absorbtion)delimiter(")>operator(})operator(])
  operator(()reserved(dosync) operator(()reserved(alter) ident(*modules*) reserved(assoc) reserved(name) operator(()ident(modules/create-armor) reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(damage-absorbtion)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(add-reactor) 
  operator([)operator({)reserved(name) string<delimiter(")content(name)delimiter(")> ident(size) string<delimiter(")content(size)delimiter(")> ident(mass) string<delimiter(")content(mass)delimiter(")> ident(hull) string<delimiter(")content(hull)delimiter(")> ident(hit-propability) string<delimiter(")content(hit-propability)delimiter(")> ident(hit-priority) string<delimiter(")content(hit-priority)delimiter(")> ident(discharge-rate) string<delimiter(")content(discharge-rate)delimiter(")> ident(output) string<delimiter(")content(output)delimiter(")> ident(capacity) string<delimiter(")content(capacity)delimiter(")> ident(efficientcy) string<delimiter(")content(efficientcy)delimiter(")>operator(})operator(])
  operator(()reserved(dosync) operator(()reserved(alter) ident(*modules*) reserved(assoc) reserved(name) operator(()ident(modules/create-reactor) reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(discharge-rate) ident(output) ident(capacity) ident(efficientcy)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(add-shield)
  operator([)operator({)reserved(name) string<delimiter(")content(name)delimiter(")> ident(size) string<delimiter(")content(size)delimiter(")> ident(mass) string<delimiter(")content(mass)delimiter(")> ident(hull) string<delimiter(")content(hull)delimiter(")> ident(energy) string<delimiter(")content(energy)delimiter(")>operator(})operator(])
  operator(()reserved(dosync) operator(()reserved(alter) ident(*modules*) reserved(assoc) reserved(name) operator(()ident(modules/create-shield) reserved(name) ident(size) ident(mass) ident(hull) ident(energy)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(add-weapon)
  operator([)operator({)
    reserved(name) string<delimiter(")content(name)delimiter(")> 
    ident(size) string<delimiter(")content(size)delimiter(")> 
    ident(mass) string<delimiter(")content(mass)delimiter(")>
    ident(hull) string<delimiter(")content(hull)delimiter(")>
    ident(hit-propability) string<delimiter(")content(hit-propability)delimiter(")>
    ident(hit-priority) string<delimiter(")content(hit-priority)delimiter(")>
    ident(damage) string<delimiter(")content(damage)delimiter(")>
    ident(fire-rate) string<delimiter(")content(fire-rate)delimiter(")>
    reserved(range) string<delimiter(")content(range)delimiter(")>
    ident(variation) string<delimiter(")content(variation)delimiter(")>
    ident(accuracy) string<delimiter(")content(accuracy)delimiter(")>
    ident(rotatability) string<delimiter(")content(rotatability)delimiter(")>
    ident(energy-usage) string<delimiter(")content(energy-usage)delimiter(")>operator(})operator(])
  operator(()reserved(dosync) operator(()reserved(alter) ident(*modules*) reserved(assoc) reserved(name) operator(()ident(modules/create-weapon) reserved(name) ident(size) ident(mass) ident(hull) ident(hit-propability) ident(hit-priority) ident(damage) ident(fire-rate) reserved(range) ident(variation) ident(accuracy) ident(rotatability) ident(energy-usage)operator(\))operator(\))operator(\))operator(\))


operator(()reserved(def) ident(*data-directory*) string<delimiter(")content(./data)delimiter(")>operator(\))

operator(()reserved(def) ident(*pp-json*) pre_constant(false)operator(\))

operator(()reserved(defn) ident(bind-game)
  operator(()operator([)ident(game)operator(])
     operator({)symbol(:cycle-log) operator(()reserved(ref) operator([)operator(])operator(\))
      symbol(:game-log) operator(()reserved(ref) operator([)operator(])operator(\))
      symbol(:game) ident(game)operator(})operator(\))
  operator(()operator([)operator(])
     operator(()ident(bind-game) operator(()ident(create-game) integer(50)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(cycle-game)
  operator(()operator([)ident(game-data)operator(])
     operator(()reserved(binding) operator([)ident(*cycle-log*) operator(()symbol(:cycle-log) ident(game-data)operator(\))
	       ident(*log*) operator(()symbol(:game-log) ident(game-data)operator(\))operator(])
       operator(()reserved(let) operator([)ident(t1)  operator(()reserved(filter) operator(#()reserved(=) string<delimiter(")content(one)delimiter(")> operator(()symbol(:team) operator(()reserved(deref) ident(%)operator(\))operator(\))operator(\)) operator(()reserved(vals) operator(()symbol(:units) operator(()symbol(:game) ident(game-data)operator(\))operator(\))operator(\))operator(\))
	     ident(c-t1) operator(()reserved(count) ident(t1)operator(\))
	     ident(t1-a) operator(()reserved(filter) operator(#()reserved(not) operator(()symbol(:destroyed) operator(()reserved(deref) ident(%)operator(\))operator(\))operator(\)) ident(t1)operator(\))
	     ident(c-t1-a) operator(()reserved(count) ident(t1-a)operator(\))
	     ident(t2)  operator(()reserved(filter) operator(#()reserved(=) string<delimiter(")content(two)delimiter(")> operator(()symbol(:team) operator(()reserved(deref) ident(%)operator(\))operator(\))operator(\)) operator(()reserved(vals) operator(()symbol(:units) operator(()symbol(:game) ident(game-data)operator(\))operator(\))operator(\))operator(\))
	     ident(c-t2) operator(()reserved(count) ident(t2)operator(\))
	     ident(t2-a) operator(()reserved(filter) operator(#()reserved(not) operator(()symbol(:destroyed) operator(()reserved(deref) ident(%)operator(\))operator(\))operator(\)) ident(t2)operator(\))
	     ident(c-t2-a) operator(()reserved(count) ident(t2-a)operator(\))operator(])
	 operator(()reserved(println) string<delimiter(")content(team one:)delimiter(")> ident(c-t1-a) string<delimiter(")content(of)delimiter(")> ident(c-t1)operator(\))
	 operator(()reserved(println) string<delimiter(")content(team two:)delimiter(")> ident(c-t2-a) string<delimiter(")content(of)delimiter(")> ident(c-t2)operator(\))
	 operator(()reserved(if) operator(()reserved(and)
	      operator(()reserved(not) operator(()reserved(zero?) ident(c-t1-a)operator(\))operator(\))
	      operator(()reserved(not) operator(()reserved(zero?) ident(c-t2-a)operator(\))operator(\))operator(\))
	   operator(()reserved(do)
	     operator(()ident(cycle-log)operator(\))
	     operator(()reserved(time) operator(()ident(cycle-game*) operator(()symbol(:game) ident(game-data)operator(\)) integer(200)operator(\))operator(\))
	     operator(()reserved(println) string<delimiter(")content(log:)delimiter(")> operator(()reserved(count) operator(@)ident(*log*)operator(\))operator(\))
	     operator(()reserved(println) string<delimiter(")content(cycle-log:)delimiter(")> operator(()reserved(count) operator(@)ident(*cycle-log*)operator(\))operator(\))
	     operator(@)ident(*cycle-log*)operator(\))
	   ident(nil)operator(\))operator(\))operator(\))operator(\))
  operator(()operator([)operator(]) operator(()ident(cycle-game) ident(*game*)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(best-target)
  operator(()operator([)ident(hostiles) ident(perfect-fn) ident(better-fn) ident(target)operator(])
     operator(()reserved(if) operator(()reserved(not) operator(()reserved(empty?) ident(hostiles)operator(\))operator(\))
       operator(()reserved(let) operator([)ident(t) operator(()reserved(first) ident(hostiles)operator(\))operator(])
	 operator(()reserved(if) operator(()reserved(or) operator(()reserved(nil?) ident(target)operator(\)) operator(()ident(better-fn) operator(@)ident(t) operator(@)ident(target)operator(\))operator(\))
	   operator(()reserved(if) operator(()ident(perfect-fn) operator(@)ident(t)operator(\))
	     ident(t)
	     operator(()reserved(recur) operator(()reserved(rest) ident(hostiles)operator(\)) ident(perfect-fn) ident(better-fn) ident(t)operator(\))operator(\))
	   operator(()reserved(recur) operator(()reserved(rest) ident(hostiles)operator(\)) ident(perfect-fn) ident(better-fn) ident(target)operator(\))operator(\))operator(\))
       ident(target)operator(\))operator(\))
     operator(()operator([)ident(hostiles) ident(perfect-fn) ident(better-fn)operator(])
	operator(()ident(best-target) ident(hostiles) ident(perfect-fn) ident(better-fn) ident(nil)operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(ff-cycle-script)
  operator([)ident(game) ident(unit)operator(])
    operator(()reserved(let) operator([)ident(d) operator(()ident(module-spec) operator(()reserved(first) operator(()ident(get-modules) operator(@)ident(unit) symbol(:weapon)operator(\))operator(\)) symbol(:range)operator(\))
	  ident(hostiles) operator(()ident(find-hostile-units) ident(game) ident(unit) integer(100)operator(\))
	  ident(target) operator(()ident(best-target) 
		  ident(hostiles) 
		  operator(()reserved(fn) operator([)ident(t)operator(]) operator(()reserved(and) operator(()reserved(<) integer(1) operator(()ident(map-distance) operator(@)ident(unit) ident(t)operator(\)) integer(3)operator(\)) operator(()reserved(>) integer(100) operator(()ident(unit-mass) ident(t)operator(\))operator(\))operator(\))operator(\))
		  operator(()reserved(fn) operator([)ident(new-t) ident(old-t)operator(]) operator(()reserved(<) operator(()ident(map-distance) operator(@)ident(unit) ident(new-t)operator(\)) operator(()ident(map-distance) operator(@)ident(unit) ident(old-t)operator(\))operator(\))operator(\))operator(\))operator(])
      operator(()reserved(if) ident(target)
	operator(()reserved(dosync) 
	  operator(()ident(register-target) ident(unit) ident(target)operator(\))
	  operator(()ident(fire-all) operator(()ident(intercept-unit) ident(game) ident(unit) ident(target) integer(2)operator(\)) ident(unit) ident(target)operator(\))operator(\))
	ident(game)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(dd-cycle-script)
  operator([)ident(game) ident(unit)operator(])
  operator(()reserved(let) operator([)ident(pd-range) integer(5)
	ident(weapon-range) integer(15)
	reserved(last) operator(()symbol(:last-target) operator(@)ident(unit)operator(\))operator(])
    operator(()reserved(if) operator(()reserved(and) reserved(last) operator(()reserved(not) operator(()symbol(:destroyed) operator(@)reserved(last)operator(\))operator(\))operator(\))
      operator(()reserved(dosync) 
	operator(()ident(fire-all) operator(()ident(intercept-unit) ident(game) ident(unit) reserved(last) operator(()reserved(if) operator(()reserved(>) operator(()ident(unit-mass) operator(@)reserved(last)operator(\)) integer(10000)operator(\)) ident(weapon-range) ident(pd-range)operator(\))operator(\)) ident(unit) reserved(last)operator(\))
	operator(()ident(emply-point-defense) ident(game) ident(unit)operator(\))
	ident(game)operator(\))
      operator(()reserved(let) operator([)ident(hostiles) operator(()ident(find-hostile-units) ident(game) ident(unit) integer(100)operator(\))
	    ident(target) operator(()ident(best-target) 
		    ident(hostiles) 
		    operator(()reserved(fn) operator([)ident(t)operator(]) operator(()reserved(and) operator(()reserved(<) integer(13) operator(()ident(map-distance) operator(@)ident(unit) ident(t)operator(\)) integer(17)operator(\)) operator(()reserved(<) integer(10000) operator(()ident(unit-mass) ident(t)operator(\))operator(\))operator(\))operator(\))
		    operator(()reserved(fn) operator([)ident(new-t) ident(old-t)operator(])
		      operator(()reserved(let) operator([)ident(n-m) operator(()ident(unit-mass) ident(new-t)operator(\))
			    ident(o-m) operator(()ident(unit-mass) ident(old-t)operator(\))operator(])
		      operator(()reserved(or) 
		       operator(()reserved(>) operator(()ident(unit-mass) ident(new-t)operator(\)) operator(()ident(unit-mass) ident(old-t)operator(\))operator(\))
		       operator(()reserved(and)
			operator(()reserved(<) operator(()reserved(*) ident(o-m) float(0.1)operator(\)) operator(()ident(Math/abs) type(#^Integer) operator(()reserved(-) ident(o-m) ident(n-m)operator(\))operator(\))operator(\))
			operator(()reserved(<) operator(()ident(map-distance) operator(@)ident(unit) ident(new-t)operator(\))  operator(()ident(map-distance) operator(@)ident(unit) ident(old-t)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(])
	operator(()ident(trace) string<delimiter(")content(cyclescript)delimiter(")> string<delimiter(")content(cycle for)delimiter(")> operator(()symbol(:id) operator(@)ident(unit)operator(\)) string<delimiter(")content(attacking:)delimiter(")> ident(target)operator(\))
	operator(()reserved(if) ident(target)
	  operator(()reserved(dosync)
	   operator(()ident(combat-log) symbol(:target) operator({)symbol(:unit) operator(()symbol(:id) operator(@)ident(unit)operator(\)) symbol(:target) operator(()symbol(:id) operator(@)ident(target)operator(\))operator(})operator(\))
	   operator(()ident(register-target) ident(unit) reserved(assoc) ident(target)operator(\))
	   operator(()ident(fire-all) operator(()ident(intercept-unit) ident(game) ident(unit) ident(target) operator(()reserved(if) operator(()reserved(>) operator(()ident(unit-mass) operator(@)ident(target)operator(\)) integer(10000)operator(\)) ident(weapon-range) ident(pd-range)operator(\))operator(\)) ident(unit) ident(target)operator(\))
	   operator(()ident(emply-point-defense) ident(game) ident(unit)operator(\))operator(\))
	  ident(game)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(dosync)
 operator(()reserved(alter) ident(*scripts*) reserved(assoc) string<delimiter(")content(fighter)delimiter(")> ident(ff-cycle-script)operator(\))
 operator(()reserved(alter) ident(*scripts*) reserved(assoc) string<delimiter(")content(destroyer)delimiter(")> ident(dd-cycle-script)operator(\))operator(\))

operator(()reserved(defn) ident(build-unit)
  operator([)ident(team) ident(unit)operator(])
  operator(()reserved(let) operator([)ident(modules) operator(()reserved(get) ident(unit) string<delimiter(")content(modules)delimiter(")>operator(\))
	ident(code) operator(()ident(*compiler*) operator(()reserved(get) ident(unit) string<delimiter(")content(script)delimiter(")>operator(\)) 
			 operator(')ident(move)
			 operator(')ident(intercept)
			 operator(')ident(foes-in-range) 
			 operator(')ident(unit-at) 
			 operator(')ident(fire-at)
			 operator(')ident(mass-of)
			 operator(')ident(fire-all)
			 operator(')ident(distance-to)operator(\))
	ident(n) operator(()reserved(str) operator(()reserved(gensym) string<delimiter(")delimiter(")>operator(\)) string<delimiter(")content(-)delimiter(")> ident(team)operator(\))
	ident(u) operator(()ident(units/init-unit) 
	   operator(()reserved(apply) ident(units/create-unit) 
		  integer(0) ident(n) ident(team) ident(code) integer(0) integer(0)
		  operator(()reserved(map) operator(#()reserved(get) operator(@)ident(*modules*) ident(%)operator(\)) ident(modules)operator(\))operator(\))operator(\))operator(])
    operator(()reserved(assoc) ident(u) symbol(:id) ident(n)operator(\))operator(\))operator(\))


operator(()reserved(defn) ident(init-unit-script)
  operator([)ident(game) ident(unit)operator(])
  operator(()reserved(let) operator([)ident(script) operator(()symbol(:cycle-script) operator(@)ident(unit)operator(\))operator(])
    operator(()ident(trace) string<delimiter(")content(init-unit-script)delimiter(")> ident(script)operator(\))
    operator(()reserved(dosync) operator(()reserved(alter) ident(unit) reserved(assoc)  symbol(:cycle-script)
		   operator(()reserved(fn) ident(cycle-script) operator([)ident(bindings)operator(]) 
		     operator(()ident(trace) string<delimiter(")content(init-unit-script-cycle-script)delimiter(")> ident(script)operator(\))
		     operator(()ident(script) ident(bindings) 
			     comment(; I am  not certain what happens here but I seem to need this nil ...)
					comment(;move)
			     operator(()reserved(fn) ident(move) operator([)ident(direction)operator(])
			       operator(()ident(trace) string<delimiter(")content(script/move)delimiter(")> string<delimiter(")content(Moving to)delimiter(")> ident(direction)operator(\))
			       operator(()reserved(throw) operator(()ident(RuntimeException.) string<delimiter(")content(Not implemented yet.)delimiter(")>operator(\))operator(\))
			       ident(nil)operator(\))
					comment(;intercept)
			     operator(()reserved(fn) ident(intercept) operator([)ident(target) ident(distance)operator(])
			       operator(()ident(trace) string<delimiter(")content(script/intercept)delimiter(")> string<delimiter(")content(Intercepting:)delimiter(")> ident(target)operator(\))
			       operator(()reserved(when-let) operator([)ident(target) operator(()ident(get-unit) ident(game) ident(target)operator(\))operator(])
				 operator(()reserved(dosync) operator(()ident(intercept-unit) ident(game) ident(unit) ident(target) ident(distance)operator(\))operator(\))
				 operator(()ident(map-distance) operator(@)ident(unit) operator(@)ident(target)operator(\))operator(\))operator(\))
					comment(;foes-in-range)
			     operator(()reserved(fn) ident(foes-in-range) operator([)reserved(range)operator(])
			       operator(()ident(trace) string<delimiter(")content(script/foes-in-range)delimiter(")> string<delimiter(")content(Getting foes in range)delimiter(")> reserved(range)operator(\))
			       operator(()reserved(map) operator(()reserved(fn) operator([)ident(u)operator(]) operator(()symbol(:id) operator(@)ident(u)operator(\))operator(\)) operator(()ident(find-hostile-units) ident(game) ident(unit) reserved(range)operator(\))operator(\))operator(\))
					comment(;unit-at )
			     operator(()reserved(fn) ident(unit-at) operator([)ident(x) ident(y)operator(])
			       integer(43)operator(\))
					comment(;fire-at)
			     operator(()reserved(fn) ident(fire-at) operator([)ident(weapon) ident(target)operator(])
			       operator(()ident(trace) string<delimiter(")content(script/fire-at)delimiter(")> string<delimiter(")content(Fiering weapon)delimiter(")> ident(weapon) string<delimiter(")content(at)delimiter(")> ident(target)operator(\))
			       operator(()reserved(when-let) operator([)ident(target) operator(()ident(get-unit) ident(game) ident(target)operator(\))operator(])
				 operator(()reserved(dosync) operator(()ident(fire-weapon) ident(game) ident(unit) ident(weapon) ident(target)operator(\))operator(\))operator(\))
			       ident(nil)operator(\))
					comment(;mass-of)
			     operator(()reserved(fn) ident(mass-of) operator([)ident(target)operator(])
			       operator(()ident(trace) string<delimiter(")content(script/mass-of)delimiter(")> string<delimiter(")content(Getting mass of)delimiter(")> ident(target)operator(\))
			       operator(()reserved(when-let) operator([)ident(target) operator(()ident(get-unit) ident(game) ident(target)operator(\))operator(])
				 operator(()ident(unit-mass) operator(@)ident(target)operator(\))operator(\))operator(\))
					comment(;fire-all)
			     operator(()reserved(fn) ident(fire-all-for-unit) operator([)ident(target)operator(])
			       operator(()ident(trace) string<delimiter(")content(script/fire-all)delimiter(")> string<delimiter(")content(Fiering all at)delimiter(")> ident(target)operator(\))
			       operator(()reserved(when-let) operator([)ident(target) operator(()ident(get-unit) ident(game) ident(target)operator(\))operator(])
				 operator(()reserved(dosync) operator(()ident(fire-all) ident(game) ident(unit) ident(target)operator(\))operator(\))operator(\))
			       ident(nil)operator(\))
					comment(;distance-to)
			     operator(()reserved(fn) ident(distance-to) operator([)ident(target)operator(])
			       operator(()ident(trace) string<delimiter(")content(script/distance-to)delimiter(")> string<delimiter(")content(Calculating distance to)delimiter(")> ident(target)operator(\))
			       operator(()reserved(when-let) operator([)ident(target) operator(()ident(get-unit) ident(game) ident(target)operator(\))operator(])
				 operator(()ident(map-distance) operator(@)ident(unit) operator(@)ident(target)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
    ident(unit)operator(\))operator(\))
  
		  
operator(()reserved(defn) ident(valid-unit)
  operator([)ident(unit)operator(])
  operator(()reserved(and) 
   operator(()reserved(=) integer(1) operator(()reserved(count) operator(()ident(get-modules) ident(unit) symbol(:hull)operator(\))operator(\))operator(\))
   operator(()reserved(=) integer(1) operator(()reserved(count) operator(()ident(get-modules) ident(unit) symbol(:engine)operator(\))operator(\))operator(\))
   operator(()reserved(>)reserved(=) integer(1) operator(()reserved(count) operator(()ident(get-modules) ident(unit) symbol(:generator)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(compile-game)
  operator([)ident(data)operator(])
  operator(()reserved(let) operator([)ident(game) operator(()ident(bind-game)operator(\))operator(])
    operator(()reserved(binding) operator([)ident(*cycle-log*) operator(()symbol(:cycle-log) ident(game)operator(\))
	      ident(*log*) operator(()symbol(:game-log) ident(game)operator(\))operator(])
      operator(()reserved(let) operator([)ident(game) operator(()reserved(assoc) 
		     ident(game) symbol(:game) 
		     operator(()reserved(reduce) operator(()reserved(fn) operator([)ident(game) operator([)ident(team) ident(data)operator(])operator(])
			       operator(()reserved(let)operator([)ident(classes) operator(()reserved(get) ident(data) string<delimiter(")content(classes)delimiter(")> operator({)operator(})operator(\))
				    ident(units) operator(()reserved(get) ident(data) string<delimiter(")content(units)delimiter(")>operator(\))
				    ident(start-x) operator(()reserved(get) ident(data) string<delimiter(")content(start-x)delimiter(")>operator(\))
				    ident(start-y) operator(()reserved(get) ident(data) string<delimiter(")content(start-y)delimiter(")>operator(\))
				    ident(d-x) operator(()reserved(get) ident(data) string<delimiter(")content(d-x)delimiter(")>operator(\))
				    ident(d-y) operator(()reserved(get) ident(data) string<delimiter(")content(d-y)delimiter(")>operator(\))
				    ident(row-size) operator(()reserved(get) ident(data) string<delimiter(")content(row-size)delimiter(")>operator(\))operator(])
				 operator(()reserved(reduce) 
				  operator(()reserved(fn) operator([)ident(game) operator([)ident(unit) ident(i)operator(])operator(])
				    operator(()reserved(let) operator([)reserved(class) operator(()reserved(get) ident(unit) string<delimiter(")content(class)delimiter(")>operator(\))
					  ident(unit) operator(()reserved(if) reserved(class) operator(()reserved(merge) ident(unit) operator(()reserved(get) ident(classes) reserved(class)operator(\))operator(\)) ident(unit)operator(\))
					  ident(u) operator(()ident(build-unit) ident(team) ident(unit)operator(\))operator(])
				      operator(()reserved(if) operator(()ident(valid-unit) ident(u)operator(\))
					operator(()reserved(let) operator([)ident(x) operator(()reserved(-) ident(start-x) operator(()reserved(mod) ident(i) ident(row-size)operator(\))operator(\))
					      ident(x) operator(()reserved(int) operator(()reserved(+) ident(x) operator(()reserved(*) ident(d-x) operator(()ident(Math/floor) operator(()reserved(/) ident(i) ident(row-size)operator(\))operator(\))operator(\))operator(\))operator(\))
					      ident(y) operator(()reserved(-) ident(start-y) operator(()reserved(mod) ident(i) ident(row-size)operator(\))operator(\))
					      ident(y) operator(()reserved(int) operator(()reserved(+) ident(y) operator(()reserved(*) ident(d-y) operator(()ident(Math/floor) operator(()reserved(/) ident(i) ident(row-size)operator(\))operator(\))operator(\))operator(\))operator(\))
					      ident(g) operator(()ident(add-unit) ident(game) ident(u)operator(\))
					      ident(u) operator(()ident(get-unit) ident(g) operator(()symbol(:id) ident(u)operator(\))operator(\))
					     operator(])
					  operator(()ident(combat-log) symbol(:spawn) operator({)symbol(:unit) operator(()symbol(:id) operator(@)ident(u)operator(\)) symbol(:team) ident(team) symbol(:data) operator(()ident(unit-data) operator(@)ident(u)operator(\))operator(})operator(\))
					  operator(()ident(move-unit*) ident(g) ident(u) ident(x) ident(y)operator(\))operator(\))
					operator(()reserved(do) 
					  operator(()reserved(println) string<delimiter(")content(Invalid unit:)delimiter(")> ident(unit)operator(\))
					  ident(game)operator(\))operator(\))operator(\))operator(\)) ident(game) operator(()reserved(map) operator(()reserved(fn) operator([)ident(a) ident(b)operator(]) operator([)ident(a) ident(b)operator(])operator(\)) ident(units) operator(()reserved(iterate) reserved(inc) integer(0)operator(\))operator(\))operator(\))operator(\))operator(\)) operator(()symbol(:game) ident(game)operator(\)) ident(data)operator(\))operator(\))operator(])
	operator(()reserved(dorun) operator(()reserved(map) operator(()reserved(partial) ident(init-unit-script) operator(()symbol(:game) ident(game)operator(\))operator(\)) operator(()reserved(vals) operator(()symbol(:units) operator(()symbol(:game) ident(game)operator(\))operator(\))operator(\))operator(\))operator(\))
	ident(game)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(load-fight)
  operator([)ident(file)operator(])
  operator(()ident(compile-game) operator(()ident(jr/read-json) operator(()reserved(slurp) ident(file)operator(\))operator(\))operator(\))operator(\))
  

operator(()reserved(defn) ident(make-cycle-seq)
     operator([)ident(game)operator(])
     operator(()reserved(lazy-seq) 
      operator(()reserved(let) operator([)ident(l) operator(()ident(cycle-game) ident(game)operator(\))operator(])
	operator(()reserved(if) operator(()reserved(and) operator(()reserved(not) operator(()reserved(empty?) ident(l)operator(\))operator(\)) operator(()reserved(>) ident(*tick-hard-limit*) operator(()reserved(count) operator(@)operator(()symbol(:game-log) ident(game)operator(\))operator(\))operator(\))operator(\))
	  operator(()reserved(cons) ident(l) operator(()ident(make-cycle-seq) ident(game)operator(\))operator(\))
	  ident(nil)operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(save-log) 
  operator([)ident(game) ident(file)operator(])
  operator(()reserved(binding) operator([)ident(*cycle-log*) operator(()symbol(:cycle-log) ident(game)operator(\))
	    ident(*log*) operator(()symbol(:game-log) ident(game)operator(\))operator(])
    operator(()reserved(dosync)
       operator(()reserved(if) operator(()reserved(not) operator(()reserved(empty?) operator(@)ident(*cycle-log*)operator(\))operator(\)) operator(()ident(cycle-log)operator(\))operator(\))
       operator(()ident(io/with-out-writer) operator(()ident(io/writer) ident(file)operator(\))
	 operator(()operator(()reserved(if) ident(*pp-json*) ident(json/print-json) ident(json/print-json)operator(\)) operator(@)ident(*log*)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(save-log1)
  operator([)ident(game)operator(])
  operator(()ident(save-log) ident(game) string<delimiter(")content(x:/interface/log.json)delimiter(")>operator(\))operator(\))
       


operator(()reserved(defn) ident(multi-game-seq)
     operator([)ident(games)operator(])
     operator(()reserved(lazy-seq) 
      operator(()reserved(let) operator([)ident(_) operator(()reserved(println) string<delimiter(")content(=====START=====)delimiter(")>operator(\))
	    ident(f) operator(()reserved(time) operator(()reserved(doall) operator(()reserved(map) reserved(first) ident(games)operator(\))operator(\))operator(\))
	    ident(_) operator(()reserved(println) string<delimiter(")content(======END======)delimiter(")>operator(\))operator(])
	operator(()reserved(if) operator(()reserved(every?) reserved(nil?) ident(f)operator(\))
	  ident(nil)
	operator(()reserved(cons) ident(f) operator(()ident(multi-game-seq) operator(()reserved(map) reserved(rest) ident(games)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()reserved(defn) ident(load-data)
  operator([)ident(data-directory)operator(])
  operator(()ident(load-data-file) operator(()reserved(str) ident(data-directory) string<delimiter(")content(/hulls.json)delimiter(")>operator(\)) ident(add-hull)operator(\))
  operator(()ident(load-data-file) operator(()reserved(str) ident(data-directory) string<delimiter(")content(/engines.json)delimiter(")>operator(\)) ident(add-engine)operator(\))
  operator(()ident(load-data-file) operator(()reserved(str) ident(data-directory) string<delimiter(")content(/armors.json)delimiter(")>operator(\)) ident(add-armor)operator(\))
  operator(()ident(load-data-file) operator(()reserved(str) ident(data-directory) string<delimiter(")content(/generators.json)delimiter(")>operator(\)) ident(add-reactor)operator(\))
  operator(()ident(load-data-file) operator(()reserved(str) ident(data-directory) string<delimiter(")content(/shields.json)delimiter(")>operator(\)) ident(add-shield)operator(\))
  operator(()ident(load-data-file) operator(()reserved(str) ident(data-directory) string<delimiter(")content(/weapons.json)delimiter(")>operator(\)) ident(add-weapon)operator(\))operator(\))


operator(()reserved(defn) ident(-main)
  operator([)ident(&) ident(args)operator(])
  operator(()ident(with-command-line) ident(args)
    string<delimiter(")content(EPIC shell)delimiter(")>
    operator([)operator([)ident(data-directory) string<delimiter(")content(specifies a data directory.)delimiter(")> string<delimiter(")content(./data)delimiter(")>operator(])
     operator([)ident(in-file) string<delimiter(")content(json fight definition)delimiter(")> string<delimiter(")content(./fight.json)delimiter(")>operator(])
     operator([)ident(out-file) string<delimiter(")content(output json file)delimiter(")> string<delimiter(")content(./log.json)delimiter(")>operator(])
     operator(])
    operator(()ident(load-data) ident(data-directory)operator(\))
    operator(()reserved(let) operator([)ident(a-game) operator(()ident(load-fight) ident(in-file)operator(\))
	  ident(g) operator(()ident(make-cycle-seq) ident(a-game)operator(\))operator(])
      operator(()reserved(println) string<delimiter(")content(START)delimiter(")>operator(\))
      operator(()reserved(time) operator(()reserved(def) ident(x) operator(()reserved(dorun) ident(g)operator(\))operator(\))operator(\))
      operator(()ident(save-log) ident(a-game) ident(out-file)operator(\))operator(\))operator(\))operator(\))
operator(()reserved(require) operator(')operator([)ident(clojure.contrib.test-is) symbol(:as) ident(test-is)operator(])operator(\))

operator(()ident(deftest) ident(module-tick-reactor)
  operator(()ident(test-is/are)
   operator(()reserved(=) ident(_1) operator(()symbol(:energy) operator(()ident(module-tick) operator({)symbol(:type) symbol(:reactor) symbol(:energy) ident(_2) symbol(:max-energy) integer(42) symbol(:output) integer(10)operator(})operator(\))operator(\))operator(\))
   integer(42) integer(42)
   integer(11) integer(1)operator(\))operator(\))