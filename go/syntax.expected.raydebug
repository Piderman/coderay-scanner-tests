comment(// A line comment.)

comment(/*
A general comment.
*/)

comment(// Keywords)

    keyword(break)        keyword(default)      keyword(func)         keyword(interface)    keyword(select)
    keyword(case)         keyword(defer)        keyword(go)           keyword(map)          keyword(struct)
    keyword(chan)         keyword(else)         keyword(goto)         keyword(package)      keyword(switch)
    keyword(const)        keyword(fallthrough)  keyword(if)           keyword(range)        keyword(type)
    keyword(continue)     keyword(for)          keyword(import)       keyword(return)       keyword(var)

comment(// Operators, delimiters and special tokens)

    operator(+)    operator(&)     operator(+=)    operator(&=)     operator(&&)    operator(==)    operator(!=)    operator(()    operator(\))
    operator(-)    operator(|)     operator(-=)    operator(|=)     operator(||)    operator(<)     operator(<=)    operator([)    operator(])
    operator(*)    operator(^)     operator(*=)    operator(^=)     operator(<-)    operator(>)     operator(>=)    operator({)    operator(})
    operator(/)    operator(<<)    operator(/=)    operator(<<=)    operator(++)    operator(=)     operator(:=)    operator(,)    operator(;)
    operator(%)    operator(>>)    operator(%=)    operator(>>=)    operator(--)    operator(!)     operator(.)operator(.)operator(.)   operator(.)    operator(:)
         operator(&^)          operator(&^=)

comment(// Integer literals)

    float(4)float(2)
    octal(0600)
    hex(0xBadFace)
    float(1)float(7)octal(0141)float(1)float(8)float(3)float(4)float(6)octal(04)float(6)float(9)float(2)float(3)float(1)float(7)float(3)float(1)float(6)float(8)float(7)float(3)octal(0371)float(5)float(8)float(8)float(4)float(1)octal(05727)

comment(// Floating-point literals)

    float(0)operator(.)
    float(7)float(2)float(.40)
    octal(07)float(2)float(.40)
    float(2)float(.71828)
    float(1)operator(.)ident(e)operator(+)float(0)
    float(6)float(.67428e-11)
    float(1)ident(E6)
    float(.25)
    float(.12345E+5)

comment(// Imaginary literals)

    imaginary(0i)
    imaginary(011i)
    imaginary(0.i)
    imaginary(2.71828i)
    imaginary(1.e+0i)
    imaginary(6.67428e-11i)
    imaginary(1E6i)
    imaginary(.25i)
    imaginary(.12345E+5i)

comment(// Character literals)

    char('a')
    char('ä')
    char('本')
    char('\\t')
    char('\\000')
    char('\\007')
    char('\\377')
    char('\\x07')
    char('\\xff')
    char(')error(\\)ident(u12e4)char(')
    char(')error(\\)ident(U00101234)char(')

comment(// String literals)

    shell<delimiter(`)content(abc)delimiter(`)>
    shell<delimiter(`)content(\\n
    \\n)delimiter(`)>
    string<delimiter(")char(\\n)delimiter(")>
    string<delimiter(")delimiter(")>
    string<delimiter(")content(Hello, world!)char(\\n)delimiter(")>
    string<delimiter(")content(日本語)delimiter(")>
    string<delimiter(")char(\\u65e5)content(本)char(\\U00008a9e)delimiter(")>
    string<delimiter(")char(\\xff)char(\\u00FF)delimiter(")>
    string<delimiter(")char(\\uD800)delimiter(")>       comment(// illegal: surrogate half)
    string<delimiter(")char(\\U00110000)delimiter(")>   comment(// illegal: invalid Unicode code point)
    string<delimiter(")>error(\\)ident(z)string<delimiter(")content(           // illegal)>

comment(// Predeclared identifiers)

    comment(// Types:)
    predefined_type(bool) predefined_type(byte) predefined_type(complex64) predefined_type(complex128) predefined_type(error) predefined_type(float32) predefined_type(float64)
    predefined_type(int) predefined_type(int8) predefined_type(int16) predefined_type(int32) predefined_type(int64) predefined_type(rune) predefined_type(string)
    predefined_type(uint) predefined_type(uint8) predefined_type(uint16) predefined_type(uint32) predefined_type(uint64) predefined_type(uintptr)

    comment(// Constants:)
    predefined_constant(true) predefined_constant(false) predefined_constant(iota)

    comment(// Zero value:)
    predefined_constant(nil)

    comment(// Functions:)
    ident(append) ident(cap) ident(close) ident(complex) ident(copy) ident(delete) ident(imag) ident(len)
    ident(make) ident(new) ident(panic) ident(print) ident(println) ident(real) ident(recover)

comment(// Types)

    keyword(type) ident(T1) predefined_type(string)
    keyword(type) ident(T2) ident(T1)
    keyword(type) ident(T3) operator([])ident(T1)
    keyword(type) ident(T4) ident(T3)

comment(// Array types)

    operator([)float(3)float(2)operator(])predefined_type(byte)
    operator([)float(2)operator(*)ident(N)operator(]) keyword(struct) operator({) ident(x)operator(,) ident(y) predefined_type(int32) operator(})
    operator([)float(1)octal(000)operator(]*)predefined_type(float64)
    operator([)float(3)operator(][)float(5)operator(])predefined_type(int)
    operator([)float(2)operator(][)float(2)operator(][)float(2)operator(])predefined_type(float64)

comment(// Struct types)

    keyword(struct) operator({})

    keyword(struct) operator({)
        ident(x)operator(,) ident(y) predefined_type(int)
        ident(u) predefined_type(float32)
        ident(_) predefined_type(float32)
        ident(A) operator(*[])predefined_type(int)
        ident(F) keyword(func)operator((\))
    operator(})

    keyword(struct) operator({)
        ident(T1)
        operator(*)ident(T2)
        ident(P)operator(.)ident(T3)
        operator(*)ident(P)operator(.)ident(T4)
        ident(x)operator(,) ident(y) predefined_type(int)
    operator(})

    keyword(struct) operator({)
        ident(T)
        operator(*)ident(T)
        operator(*)ident(P)operator(.)ident(T)
    operator(})

    keyword(struct) operator({)
        ident(microsec)  predefined_type(uint64) string<delimiter(")content(field 1)delimiter(")>
        ident(serverIP6) predefined_type(uint64) string<delimiter(")content(field 2)delimiter(")>
        ident(process)   predefined_type(string) string<delimiter(")content(field 3)delimiter(")>
    operator(})

comment(// Function types)

    keyword(func)operator((\))
    keyword(func)operator(()ident(x) predefined_type(int)operator(\)) predefined_type(int)
    keyword(func)operator(()ident(a)operator(,) ident(_) predefined_type(int)operator(,) ident(z) predefined_type(float32)operator(\)) predefined_type(bool)
    keyword(func)operator(()ident(a)operator(,) ident(b) predefined_type(int)operator(,) ident(z) predefined_type(float32)operator(\)) operator(()predefined_type(bool)operator(\))
    keyword(func)operator(()ident(prefix) predefined_type(string)operator(,) ident(values) operator(.)operator(.)operator(.)predefined_type(int)operator(\))
    keyword(func)operator(()ident(a)operator(,) ident(b) predefined_type(int)operator(,) ident(z) predefined_type(float64)operator(,) ident(opt) operator(.)operator(.)operator(.)keyword(interface)operator({}\)) operator(()ident(success) predefined_type(bool)operator(\))
    keyword(func)operator(()predefined_type(int)operator(,) predefined_type(int)operator(,) predefined_type(float64)operator(\)) operator(()predefined_type(float64)operator(,) operator(*[])predefined_type(int)operator(\))
    keyword(func)operator(()ident(n) predefined_type(int)operator(\)) keyword(func)operator(()ident(p) operator(*)ident(T)operator(\))

comment(// Interface types)

    keyword(interface) operator({)
        ident(Read)operator(()ident(b) ident(Buffer)operator(\)) predefined_type(bool)
        ident(Write)operator(()ident(b) ident(Buffer)operator(\)) predefined_type(bool)
        ident(Close)operator((\))
    operator(})

    keyword(type) ident(Lock) keyword(interface) operator({)
        ident(Lock)operator((\))
        ident(Unlock)operator((\))
    operator(})

comment(// Channel types)

    keyword(chan) ident(T)
    keyword(chan)operator(<-) predefined_type(float64)
    operator(<-)keyword(chan) predefined_type(int)

    keyword(chan)operator(<-) keyword(chan) predefined_type(int)
    keyword(chan)operator(<-) operator(<-)keyword(chan) predefined_type(int)
    operator(<-)keyword(chan) operator(<-)keyword(chan) predefined_type(int)
    keyword(chan) operator((<-)keyword(chan) predefined_type(int)operator(\))
