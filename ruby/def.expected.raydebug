comment(# simple method definitions)

reserved(def) method(method) ident(param1)operator(,) ident(param2)
  comment(# code)
reserved(end)

reserved(def) method(method)operator(()ident(args)operator(,) operator(*)ident(rest)operator(,) operator(&)ident(block)operator(\))
  comment(# code)
reserved(end)

reserved(def)
method(method)operator(()ident(param1)operator(,) ident(param2)operator(\))
  comment(# code)
reserved(end)

reserved(def) \
method(method)operator(()ident(param1)operator(,) ident(param2)operator(\))
  comment(# code)
reserved(end)

reserved(def) comment(# comment)
method(method)operator(()ident(param1)operator(,) ident(param2)operator(\))
  comment(# code)
reserved(end)

reserved(def) method([])operator(;)reserved(end)
reserved(def) method(def)operator(;)reserved(end)
reserved(def) method(end?)operator(;)reserved(end)
reserved(def) method(a)operator(()operator(*)operator(\)) reserved(end)
reserved(def) method(!)operator(;) reserved(end)  comment(# Ruby 1.9)


comment(# singleton methods)

reserved(def) constant(Class)operator(.)method(method)
reserved(end)

reserved(def) pre_constant(self)operator(.)method(method)
reserved(end)

reserved(def) ident(object)operator(.)method(method)
reserved(end)

reserved(def) ident(object)operator(.)method(Method)
reserved(end)

reserved(def) global_variable($~)operator(.)method(method)
reserved(end)

reserved(def) pre_constant(nil)operator(.)method(method)
reserved(end)
reserved(def) pre_constant(true)operator(.)method(method)
reserved(end)
reserved(def) pre_constant(false)operator(.)method(method)
reserved(end)
reserved(def) pre_constant(__FILE__)operator(.)method(method)
reserved(end)
reserved(def) pre_constant(__LINE__)operator(.)method(method)
reserved(end)
reserved(def) pre_constant(__ENCODING__)operator(.)method(method)
reserved(end)
reserved(def) pre_constant(__ENCODING__)operator(.)method(method)
reserved(end)

reserved(def) instance_variable(@instance_variable)operator(.)method(method)
reserved(end)

reserved(def) instance_variable(@class_variable)operator(.)method(method)
reserved(end)

reserved(def) operator(()constant(Module)operator(::)constant(Class)operator(\))operator(.)method(method)
reserved(end)

reserved(def) operator(()ident(complex)operator(.)ident(expression)operator(\))operator(.)method(method)
reserved(end)

reserved(def) operator(()ident(complex)operator(.)ident(expression) operator(+) ident(another)operator(()ident(complex)operator(()ident(expression)operator(\))operator(\))operator(\))operator(.)method(method)
reserved(end)


comment(# crazy)

reserved(def) operator(()reserved(class) class(Foo)
  reserved(def) method(initialize)operator(()ident(args)operator(\))
    reserved(def) method(yet_another_method)operator(;) reserved(end)
  reserved(end)
reserved(end)operator(\))operator(.)method(method)operator(()ident(args)operator(,) operator(*)ident(rest)operator(,) operator(&)ident(block)operator(\))
reserved(end)

comment(# wrong)
reserved(def) ident(foo)operator(.)ident(bar)error(.)ident(quux)
reserved(end)
